
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00802000  00001e48  00001edc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000277  00802094  00802094  00001f70  2**2
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000027cb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000510  00000000  00000000  00002800  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000788d  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018ea  00000000  00000000  0000a59d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006148  00000000  00000000  0000be87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d70  00000000  00000000  00011fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00028874  00000000  00000000  00012d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b0e  00000000  00000000  0003b5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004f8  00000000  00000000  0003f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00008ce1  00000000  00000000  0003f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	16 c1       	rjmp	.+556    	; 0x236 <__bad_interrupt>
       a:	00 00       	nop
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	06 c1       	rjmp	.+524    	; 0x236 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	04 c1       	rjmp	.+520    	; 0x236 <__bad_interrupt>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	00 c1       	rjmp	.+512    	; 0x236 <__bad_interrupt>
      36:	00 00       	nop
      38:	fe c0       	rjmp	.+508    	; 0x236 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fc c0       	rjmp	.+504    	; 0x236 <__bad_interrupt>
      3e:	00 00       	nop
      40:	fa c0       	rjmp	.+500    	; 0x236 <__bad_interrupt>
      42:	00 00       	nop
      44:	f8 c0       	rjmp	.+496    	; 0x236 <__bad_interrupt>
      46:	00 00       	nop
      48:	f6 c0       	rjmp	.+492    	; 0x236 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f4 c0       	rjmp	.+488    	; 0x236 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f2 c0       	rjmp	.+484    	; 0x236 <__bad_interrupt>
      52:	00 00       	nop
      54:	f0 c0       	rjmp	.+480    	; 0x236 <__bad_interrupt>
      56:	00 00       	nop
      58:	ee c0       	rjmp	.+476    	; 0x236 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ec c0       	rjmp	.+472    	; 0x236 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e2 c0       	rjmp	.+452    	; 0x236 <__bad_interrupt>
      72:	00 00       	nop
      74:	e0 c0       	rjmp	.+448    	; 0x236 <__bad_interrupt>
      76:	00 00       	nop
      78:	de c0       	rjmp	.+444    	; 0x236 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	d6 c0       	rjmp	.+428    	; 0x236 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	be c0       	rjmp	.+380    	; 0x236 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bc c0       	rjmp	.+376    	; 0x236 <__bad_interrupt>
      be:	00 00       	nop
      c0:	ba c0       	rjmp	.+372    	; 0x236 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b8 c0       	rjmp	.+368    	; 0x236 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b6 c0       	rjmp	.+364    	; 0x236 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b4 c0       	rjmp	.+360    	; 0x236 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b2 c0       	rjmp	.+356    	; 0x236 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a6 c0       	rjmp	.+332    	; 0x236 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a4 c0       	rjmp	.+328    	; 0x236 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a2 c0       	rjmp	.+324    	; 0x236 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9a c0       	rjmp	.+308    	; 0x236 <__bad_interrupt>
     102:	00 00       	nop
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	96 c0       	rjmp	.+300    	; 0x236 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c0       	rjmp	.+280    	; 0x236 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8a c0       	rjmp	.+276    	; 0x236 <__bad_interrupt>
     122:	00 00       	nop
     124:	88 c0       	rjmp	.+272    	; 0x236 <__bad_interrupt>
     126:	00 00       	nop
     128:	86 c0       	rjmp	.+268    	; 0x236 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	80 c0       	rjmp	.+256    	; 0x236 <__bad_interrupt>
     136:	00 00       	nop
     138:	7e c0       	rjmp	.+252    	; 0x236 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7c c0       	rjmp	.+248    	; 0x236 <__bad_interrupt>
     13e:	00 00       	nop
     140:	7a c0       	rjmp	.+244    	; 0x236 <__bad_interrupt>
     142:	00 00       	nop
     144:	78 c0       	rjmp	.+240    	; 0x236 <__bad_interrupt>
     146:	00 00       	nop
     148:	76 c0       	rjmp	.+236    	; 0x236 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	74 c0       	rjmp	.+232    	; 0x236 <__bad_interrupt>
     14e:	00 00       	nop
     150:	72 c0       	rjmp	.+228    	; 0x236 <__bad_interrupt>
     152:	00 00       	nop
     154:	70 c0       	rjmp	.+224    	; 0x236 <__bad_interrupt>
     156:	00 00       	nop
     158:	6e c0       	rjmp	.+220    	; 0x236 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__vector_125>
     1f8:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <__vector_126>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	d7 e2       	ldi	r29, 0x27	; 39
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e8 e4       	ldi	r30, 0x48	; 72
     210:	fe e1       	ldi	r31, 0x1E	; 30
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a2 39       	cpi	r26, 0x92	; 146
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	23 e2       	ldi	r18, 0x23	; 35
     220:	a4 e9       	ldi	r26, 0x94	; 148
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	ab 30       	cpi	r26, 0x0B	; 11
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <main>
     232:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	00 d0       	rcall	.+0      	; 0x23e <sysclk_init+0x6>
     23e:	00 d0       	rcall	.+0      	; 0x240 <sysclk_init+0x8>
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	8f ef       	ldi	r24, 0xFF	; 255
     246:	80 93 70 00 	sts	0x0070, r24
     24a:	80 93 71 00 	sts	0x0071, r24
     24e:	80 93 72 00 	sts	0x0072, r24
     252:	80 93 73 00 	sts	0x0073, r24
     256:	80 93 74 00 	sts	0x0074, r24
     25a:	80 93 75 00 	sts	0x0075, r24
     25e:	80 93 76 00 	sts	0x0076, r24
     262:	6c e1       	ldi	r22, 0x1C	; 28
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	82 e0       	ldi	r24, 0x02	; 2
     268:	35 d7       	rcall	.+3690   	; 0x10d4 <nvm_read_byte>
     26a:	8a 83       	std	Y+2, r24	; 0x02
     26c:	6d e1       	ldi	r22, 0x1D	; 29
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	30 d7       	rcall	.+3680   	; 0x10d4 <nvm_read_byte>
     274:	89 83       	std	Y+1, r24	; 0x01
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	21 f4       	brne	.+8      	; 0x286 <sysclk_init+0x4e>
     27e:	80 e4       	ldi	r24, 0x40	; 64
     280:	93 e2       	ldi	r25, 0x23	; 35
     282:	89 83       	std	Y+1, r24	; 0x01
     284:	9a 83       	std	Y+2, r25	; 0x02
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	9a 81       	ldd	r25, Y+2	; 0x02
     28a:	8b 83       	std	Y+3, r24	; 0x03
     28c:	9c 83       	std	Y+4, r25	; 0x04
     28e:	e0 e6       	ldi	r30, 0x60	; 96
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	82 83       	std	Z+2, r24	; 0x02
     294:	8c 81       	ldd	r24, Y+4	; 0x04
     296:	83 83       	std	Z+3, r24	; 0x03
     298:	e0 e5       	ldi	r30, 0x50	; 80
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	81 81       	ldd	r24, Z+1	; 0x01
     29e:	84 fd       	sbrc	r24, 4
     2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <sysclk_init+0x80>
     2a2:	8f b7       	in	r24, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	9c e0       	ldi	r25, 0x0C	; 12
     2a8:	95 83       	std	Z+5, r25	; 0x05
     2aa:	90 81       	ld	r25, Z
     2ac:	90 61       	ori	r25, 0x10	; 16
     2ae:	90 83       	st	Z, r25
     2b0:	8f bf       	out	0x3f, r24	; 63
     2b2:	81 81       	ldd	r24, Z+1	; 0x01
     2b4:	84 ff       	sbrs	r24, 4
     2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <sysclk_init+0x7a>
     2b8:	64 e0       	ldi	r22, 0x04	; 4
     2ba:	80 e4       	ldi	r24, 0x40	; 64
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	04 d7       	rcall	.+3592   	; 0x10c8 <ccp_write_io>
     2c0:	24 96       	adiw	r28, 0x04	; 4
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	08 95       	ret

000002cc <sysclk_enable_module>:
     2cc:	2f b7       	in	r18, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	fc 01       	movw	r30, r24
     2d2:	e0 59       	subi	r30, 0x90	; 144
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	60 95       	com	r22
     2d8:	80 81       	ld	r24, Z
     2da:	68 23       	and	r22, r24
     2dc:	60 83       	st	Z, r22
     2de:	2f bf       	out	0x3f, r18	; 63
     2e0:	08 95       	ret

000002e2 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     2e2:	86 30       	cpi	r24, 0x06	; 6
     2e4:	11 f4       	brne	.+4      	; 0x2ea <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
     2e6:	68 e1       	ldi	r22, 0x18	; 24
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
     2ea:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     2ec:	e0 e5       	ldi	r30, 0x50	; 80
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     2f2:	81 fd       	sbrc	r24, 1
     2f4:	24 c0       	rjmp	.+72     	; 0x33e <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     2f6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     2f8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     2fa:	90 81       	ld	r25, Z
     2fc:	92 60       	ori	r25, 0x02	; 2
     2fe:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     300:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     302:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     304:	81 ff       	sbrs	r24, 1
     306:	fd cf       	rjmp	.-6      	; 0x302 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     308:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     30a:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     30c:	a0 e5       	ldi	r26, 0x50	; 80
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	16 96       	adiw	r26, 0x06	; 6
     312:	9c 91       	ld	r25, X
     314:	16 97       	sbiw	r26, 0x06	; 6
     316:	99 7f       	andi	r25, 0xF9	; 249
     318:	16 96       	adiw	r26, 0x06	; 6
     31a:	9c 93       	st	X, r25
     31c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     31e:	e0 e6       	ldi	r30, 0x60	; 96
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	90 e8       	ldi	r25, 0x80	; 128
     324:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     326:	9b eb       	ldi	r25, 0xBB	; 187
     328:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     32a:	16 96       	adiw	r26, 0x06	; 6
     32c:	9c 91       	ld	r25, X
     32e:	16 97       	sbiw	r26, 0x06	; 6
     330:	94 60       	ori	r25, 0x04	; 4
     332:	16 96       	adiw	r26, 0x06	; 6
     334:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     336:	90 81       	ld	r25, Z
     338:	91 60       	ori	r25, 0x01	; 1
     33a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     33c:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     33e:	63 60       	ori	r22, 0x03	; 3
     340:	84 e4       	ldi	r24, 0x44	; 68
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	c1 d6       	rcall	.+3458   	; 0x10c8 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     346:	60 e4       	ldi	r22, 0x40	; 64
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	bf cf       	rjmp	.-130    	; 0x2cc <sysclk_enable_module>

0000034e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
 *
 */
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
     352:	fc 01       	movw	r30, r24
     354:	70 96       	adiw	r30, 0x10	; 16
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     35a:	c6 2f       	mov	r28, r22
     35c:	d0 e0       	ldi	r29, 0x00	; 0
     35e:	de 01       	movw	r26, r28
     360:	02 2e       	mov	r0, r18
     362:	02 c0       	rjmp	.+4      	; 0x368 <ioport_configure_port_pin+0x1a>
     364:	b5 95       	asr	r27
     366:	a7 95       	ror	r26
     368:	0a 94       	dec	r0
     36a:	e2 f7       	brpl	.-8      	; 0x364 <ioport_configure_port_pin+0x16>
     36c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     36e:	50 83       	st	Z, r21
     370:	2f 5f       	subi	r18, 0xFF	; 255
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     376:	28 30       	cpi	r18, 0x08	; 8
     378:	31 05       	cpc	r19, r1
     37a:	89 f7       	brne	.-30     	; 0x35e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     37c:	40 ff       	sbrs	r20, 0
     37e:	0a c0       	rjmp	.+20     	; 0x394 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     380:	41 ff       	sbrs	r20, 1
     382:	03 c0       	rjmp	.+6      	; 0x38a <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     384:	fc 01       	movw	r30, r24
     386:	65 83       	std	Z+5, r22	; 0x05
     388:	02 c0       	rjmp	.+4      	; 0x38e <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     38a:	fc 01       	movw	r30, r24
     38c:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     38e:	fc 01       	movw	r30, r24
     390:	61 83       	std	Z+1, r22	; 0x01
     392:	02 c0       	rjmp	.+4      	; 0x398 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     394:	fc 01       	movw	r30, r24
     396:	62 83       	std	Z+2, r22	; 0x02
	}
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     39e:	80 91 9d 20 	lds	r24, 0x209D
     3a2:	81 50       	subi	r24, 0x01	; 1
     3a4:	80 93 9d 20 	sts	0x209D, r24
     3a8:	08 95       	ret

000003aa <udi_cdc_data_setup>:
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	08 95       	ret

000003ae <udi_cdc_getsetting>:
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	08 95       	ret

000003b2 <udi_cdc_comm_setup>:
     3b2:	80 91 fb 22 	lds	r24, 0x22FB
     3b6:	88 23       	and	r24, r24
     3b8:	dc f4       	brge	.+54     	; 0x3f0 <udi_cdc_comm_setup+0x3e>
     3ba:	80 76       	andi	r24, 0x60	; 96
     3bc:	80 32       	cpi	r24, 0x20	; 32
     3be:	e9 f5       	brne	.+122    	; 0x43a <udi_cdc_comm_setup+0x88>
     3c0:	80 91 fc 22 	lds	r24, 0x22FC
     3c4:	81 32       	cpi	r24, 0x21	; 33
     3c6:	d9 f5       	brne	.+118    	; 0x43e <udi_cdc_comm_setup+0x8c>
     3c8:	80 91 01 23 	lds	r24, 0x2301
     3cc:	90 91 02 23 	lds	r25, 0x2302
     3d0:	07 97       	sbiw	r24, 0x07	; 7
     3d2:	b9 f5       	brne	.+110    	; 0x442 <udi_cdc_comm_setup+0x90>
     3d4:	8a ea       	ldi	r24, 0xAA	; 170
     3d6:	90 e2       	ldi	r25, 0x20	; 32
     3d8:	80 93 03 23 	sts	0x2303, r24
     3dc:	90 93 04 23 	sts	0x2304, r25
     3e0:	87 e0       	ldi	r24, 0x07	; 7
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	80 93 05 23 	sts	0x2305, r24
     3e8:	90 93 06 23 	sts	0x2306, r25
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	08 95       	ret
     3f0:	80 76       	andi	r24, 0x60	; 96
     3f2:	80 32       	cpi	r24, 0x20	; 32
     3f4:	41 f5       	brne	.+80     	; 0x446 <udi_cdc_comm_setup+0x94>
     3f6:	80 91 fc 22 	lds	r24, 0x22FC
     3fa:	80 32       	cpi	r24, 0x20	; 32
     3fc:	21 f0       	breq	.+8      	; 0x406 <udi_cdc_comm_setup+0x54>
     3fe:	82 32       	cpi	r24, 0x22	; 34
     400:	21 f5       	brne	.+72     	; 0x44a <udi_cdc_comm_setup+0x98>
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	08 95       	ret
     406:	80 91 01 23 	lds	r24, 0x2301
     40a:	90 91 02 23 	lds	r25, 0x2302
     40e:	07 97       	sbiw	r24, 0x07	; 7
     410:	f1 f4       	brne	.+60     	; 0x44e <udi_cdc_comm_setup+0x9c>
     412:	89 e2       	ldi	r24, 0x29	; 41
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	80 93 07 23 	sts	0x2307, r24
     41a:	90 93 08 23 	sts	0x2308, r25
     41e:	8a ea       	ldi	r24, 0xAA	; 170
     420:	90 e2       	ldi	r25, 0x20	; 32
     422:	80 93 03 23 	sts	0x2303, r24
     426:	90 93 04 23 	sts	0x2304, r25
     42a:	87 e0       	ldi	r24, 0x07	; 7
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	80 93 05 23 	sts	0x2305, r24
     432:	90 93 06 23 	sts	0x2306, r25
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	08 95       	ret
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	08 95       	ret
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	08 95       	ret
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	08 95       	ret
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	08 95       	ret
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	08 95       	ret
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	08 95       	ret

00000452 <udi_cdc_line_coding_received>:
     452:	08 95       	ret

00000454 <udi_cdc_tx_send>:
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	80 91 95 20 	lds	r24, 0x2095
     462:	81 11       	cpse	r24, r1
     464:	9c c0       	rjmp	.+312    	; 0x59e <udi_cdc_tx_send+0x14a>
     466:	0e 94 1c 0c 	call	0x1838	; 0x1838 <udd_is_high_speed>
     46a:	88 23       	and	r24, r24
     46c:	51 f0       	breq	.+20     	; 0x482 <udi_cdc_tx_send+0x2e>
     46e:	c0 91 b5 20 	lds	r28, 0x20B5
     472:	d0 91 b6 20 	lds	r29, 0x20B6
     476:	0e 94 2b 0c 	call	0x1856	; 0x1856 <udd_get_micro_frame_number>
     47a:	c8 17       	cp	r28, r24
     47c:	d9 07       	cpc	r29, r25
     47e:	59 f4       	brne	.+22     	; 0x496 <udi_cdc_tx_send+0x42>
     480:	8e c0       	rjmp	.+284    	; 0x59e <udi_cdc_tx_send+0x14a>
     482:	c0 91 b5 20 	lds	r28, 0x20B5
     486:	d0 91 b6 20 	lds	r29, 0x20B6
     48a:	0e 94 24 0c 	call	0x1848	; 0x1848 <udd_get_frame_number>
     48e:	c8 17       	cp	r28, r24
     490:	d9 07       	cpc	r29, r25
     492:	09 f4       	brne	.+2      	; 0x496 <udi_cdc_tx_send+0x42>
     494:	84 c0       	rjmp	.+264    	; 0x59e <udi_cdc_tx_send+0x14a>
     496:	df b7       	in	r29, 0x3f	; 63
     498:	f8 94       	cli
     49a:	c0 91 96 20 	lds	r28, 0x2096
     49e:	ec 2f       	mov	r30, r28
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	ef 54       	subi	r30, 0x4F	; 79
     4a8:	ff 4d       	sbci	r31, 0xDF	; 223
     4aa:	80 81       	ld	r24, Z
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	89 2b       	or	r24, r25
     4b0:	09 f5       	brne	.+66     	; 0x4f4 <udi_cdc_tx_send+0xa0>
     4b2:	80 91 bb 20 	lds	r24, 0x20BB
     4b6:	90 91 bc 20 	lds	r25, 0x20BC
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	80 93 bb 20 	sts	0x20BB, r24
     4c0:	90 93 bc 20 	sts	0x20BC, r25
     4c4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <udd_is_high_speed>
     4c8:	81 11       	cpse	r24, r1
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <udi_cdc_tx_send+0x86>
     4cc:	80 91 bb 20 	lds	r24, 0x20BB
     4d0:	90 91 bc 20 	lds	r25, 0x20BC
     4d4:	84 36       	cpi	r24, 0x64	; 100
     4d6:	91 05       	cpc	r25, r1
     4d8:	58 f0       	brcs	.+22     	; 0x4f0 <udi_cdc_tx_send+0x9c>
     4da:	0e 94 1c 0c 	call	0x1838	; 0x1838 <udd_is_high_speed>
     4de:	88 23       	and	r24, r24
     4e0:	49 f0       	breq	.+18     	; 0x4f4 <udi_cdc_tx_send+0xa0>
     4e2:	80 91 bb 20 	lds	r24, 0x20BB
     4e6:	90 91 bc 20 	lds	r25, 0x20BC
     4ea:	80 32       	cpi	r24, 0x20	; 32
     4ec:	93 40       	sbci	r25, 0x03	; 3
     4ee:	10 f4       	brcc	.+4      	; 0x4f4 <udi_cdc_tx_send+0xa0>
     4f0:	df bf       	out	0x3f, r29	; 63
     4f2:	55 c0       	rjmp	.+170    	; 0x59e <udi_cdc_tx_send+0x14a>
     4f4:	10 92 bb 20 	sts	0x20BB, r1
     4f8:	10 92 bc 20 	sts	0x20BC, r1
     4fc:	80 91 94 20 	lds	r24, 0x2094
     500:	81 11       	cpse	r24, r1
     502:	06 c0       	rjmp	.+12     	; 0x510 <udi_cdc_tx_send+0xbc>
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	c1 11       	cpse	r28, r1
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	80 93 96 20 	sts	0x2096, r24
     50e:	04 c0       	rjmp	.+8      	; 0x518 <udi_cdc_tx_send+0xc4>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	c1 11       	cpse	r28, r1
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	c8 2f       	mov	r28, r24
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	80 93 95 20 	sts	0x2095, r24
     51e:	df bf       	out	0x3f, r29	; 63
     520:	d0 e0       	ldi	r29, 0x00	; 0
     522:	fe 01       	movw	r30, r28
     524:	ee 0f       	add	r30, r30
     526:	ff 1f       	adc	r31, r31
     528:	ef 54       	subi	r30, 0x4F	; 79
     52a:	ff 4d       	sbci	r31, 0xDF	; 223
     52c:	ff 24       	eor	r15, r15
     52e:	f3 94       	inc	r15
     530:	80 81       	ld	r24, Z
     532:	91 81       	ldd	r25, Z+1	; 0x01
     534:	80 34       	cpi	r24, 0x40	; 64
     536:	91 05       	cpc	r25, r1
     538:	09 f4       	brne	.+2      	; 0x53c <udi_cdc_tx_send+0xe8>
     53a:	f1 2c       	mov	r15, r1
     53c:	ff 20       	and	r15, r15
     53e:	91 f0       	breq	.+36     	; 0x564 <udi_cdc_tx_send+0x110>
     540:	0e 94 1c 0c 	call	0x1838	; 0x1838 <udd_is_high_speed>
     544:	88 23       	and	r24, r24
     546:	39 f0       	breq	.+14     	; 0x556 <udi_cdc_tx_send+0x102>
     548:	0e 94 2b 0c 	call	0x1856	; 0x1856 <udd_get_micro_frame_number>
     54c:	80 93 b5 20 	sts	0x20B5, r24
     550:	90 93 b6 20 	sts	0x20B6, r25
     554:	0b c0       	rjmp	.+22     	; 0x56c <udi_cdc_tx_send+0x118>
     556:	0e 94 24 0c 	call	0x1848	; 0x1848 <udd_get_frame_number>
     55a:	80 93 b5 20 	sts	0x20B5, r24
     55e:	90 93 b6 20 	sts	0x20B6, r25
     562:	04 c0       	rjmp	.+8      	; 0x56c <udi_cdc_tx_send+0x118>
     564:	10 92 b5 20 	sts	0x20B5, r1
     568:	10 92 b6 20 	sts	0x20B6, r1
     56c:	fe 01       	movw	r30, r28
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	ef 54       	subi	r30, 0x4F	; 79
     574:	ff 4d       	sbci	r31, 0xDF	; 223
     576:	20 81       	ld	r18, Z
     578:	31 81       	ldd	r19, Z+1	; 0x01
     57a:	ae 01       	movw	r20, r28
     57c:	00 24       	eor	r0, r0
     57e:	56 95       	lsr	r21
     580:	47 95       	ror	r20
     582:	07 94       	ror	r0
     584:	56 95       	lsr	r21
     586:	47 95       	ror	r20
     588:	07 94       	ror	r0
     58a:	54 2f       	mov	r21, r20
     58c:	40 2d       	mov	r20, r0
     58e:	42 54       	subi	r20, 0x42	; 66
     590:	5f 4d       	sbci	r21, 0xDF	; 223
     592:	07 ed       	ldi	r16, 0xD7	; 215
     594:	12 e0       	ldi	r17, 0x02	; 2
     596:	6f 2d       	mov	r22, r15
     598:	81 e8       	ldi	r24, 0x81	; 129
     59a:	0e 94 80 0c 	call	0x1900	; 0x1900 <udd_ep_run>
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	08 95       	ret

000005aa <udi_cdc_data_sof_notify>:
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	53 cf       	rjmp	.-346    	; 0x454 <udi_cdc_tx_send>

000005ae <udi_cdc_data_sent>:
     5ae:	89 2b       	or	r24, r25
     5b0:	a9 f4       	brne	.+42     	; 0x5dc <udi_cdc_data_sent+0x2e>
     5b2:	20 91 96 20 	lds	r18, 0x2096
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	22 23       	and	r18, r18
     5bc:	11 f0       	breq	.+4      	; 0x5c2 <udi_cdc_data_sent+0x14>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	fc 01       	movw	r30, r24
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	ef 54       	subi	r30, 0x4F	; 79
     5ca:	ff 4d       	sbci	r31, 0xDF	; 223
     5cc:	10 82       	st	Z, r1
     5ce:	11 82       	std	Z+1, r1	; 0x01
     5d0:	10 92 94 20 	sts	0x2094, r1
     5d4:	10 92 95 20 	sts	0x2095, r1
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	3c cf       	rjmp	.-392    	; 0x454 <udi_cdc_tx_send>
     5dc:	08 95       	ret

000005de <udi_cdc_data_disable>:
     5de:	80 91 9c 20 	lds	r24, 0x209C
     5e2:	81 50       	subi	r24, 0x01	; 1
     5e4:	80 93 9c 20 	sts	0x209C, r24
     5e8:	80 91 9c 20 	lds	r24, 0x209C
     5ec:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <my_callback_cdc_disable>
     5f0:	10 92 9b 20 	sts	0x209B, r1
     5f4:	08 95       	ret

000005f6 <udi_cdc_comm_enable>:
     5f6:	10 92 9d 20 	sts	0x209D, r1
     5fa:	10 92 9e 20 	sts	0x209E, r1
     5fe:	10 92 9f 20 	sts	0x209F, r1
     602:	81 ea       	ldi	r24, 0xA1	; 161
     604:	80 93 a0 20 	sts	0x20A0, r24
     608:	80 e2       	ldi	r24, 0x20	; 32
     60a:	80 93 a1 20 	sts	0x20A1, r24
     60e:	10 92 a2 20 	sts	0x20A2, r1
     612:	10 92 a3 20 	sts	0x20A3, r1
     616:	10 92 a4 20 	sts	0x20A4, r1
     61a:	10 92 a5 20 	sts	0x20A5, r1
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	80 93 a6 20 	sts	0x20A6, r24
     626:	90 93 a7 20 	sts	0x20A7, r25
     62a:	10 92 a8 20 	sts	0x20A8, r1
     62e:	10 92 a9 20 	sts	0x20A9, r1
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	92 ec       	ldi	r25, 0xC2	; 194
     636:	a1 e0       	ldi	r26, 0x01	; 1
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	80 93 aa 20 	sts	0x20AA, r24
     63e:	90 93 ab 20 	sts	0x20AB, r25
     642:	a0 93 ac 20 	sts	0x20AC, r26
     646:	b0 93 ad 20 	sts	0x20AD, r27
     64a:	10 92 ae 20 	sts	0x20AE, r1
     64e:	10 92 af 20 	sts	0x20AF, r1
     652:	88 e0       	ldi	r24, 0x08	; 8
     654:	80 93 b0 20 	sts	0x20B0, r24
     658:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <my_callback_cdc_enable>
     65c:	88 23       	and	r24, r24
     65e:	39 f0       	breq	.+14     	; 0x66e <udi_cdc_comm_enable+0x78>
     660:	80 91 9d 20 	lds	r24, 0x209D
     664:	8f 5f       	subi	r24, 0xFF	; 255
     666:	80 93 9d 20 	sts	0x209D, r24
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	08 95       	ret
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	08 95       	ret

00000672 <udi_cdc_multi_get_nb_received_data>:
     672:	4f b7       	in	r20, 0x3f	; 63
     674:	f8 94       	cli
     676:	80 91 98 20 	lds	r24, 0x2098
     67a:	90 91 99 20 	lds	r25, 0x2099
     67e:	e0 91 9a 20 	lds	r30, 0x209A
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	e9 54       	subi	r30, 0x49	; 73
     68a:	ff 4d       	sbci	r31, 0xDF	; 223
     68c:	20 81       	ld	r18, Z
     68e:	31 81       	ldd	r19, Z+1	; 0x01
     690:	28 1b       	sub	r18, r24
     692:	39 0b       	sbc	r19, r25
     694:	4f bf       	out	0x3f, r20	; 63
     696:	82 2f       	mov	r24, r18
     698:	93 2f       	mov	r25, r19
     69a:	08 95       	ret

0000069c <udi_cdc_multi_is_rx_ready>:
     69c:	ea df       	rcall	.-44     	; 0x672 <udi_cdc_multi_get_nb_received_data>
     69e:	21 e0       	ldi	r18, 0x01	; 1
     6a0:	89 2b       	or	r24, r25
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <udi_cdc_multi_is_rx_ready+0xa>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	82 2f       	mov	r24, r18
     6a8:	08 95       	ret

000006aa <udi_cdc_rx_start>:
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	4f b7       	in	r20, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	50 91 9a 20 	lds	r21, 0x209A
     6ba:	80 91 97 20 	lds	r24, 0x2097
     6be:	81 11       	cpse	r24, r1
     6c0:	10 c0       	rjmp	.+32     	; 0x6e2 <udi_cdc_rx_start+0x38>
     6c2:	20 91 98 20 	lds	r18, 0x2098
     6c6:	30 91 99 20 	lds	r19, 0x2099
     6ca:	c5 2f       	mov	r28, r21
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	fe 01       	movw	r30, r28
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e9 54       	subi	r30, 0x49	; 73
     6d6:	ff 4d       	sbci	r31, 0xDF	; 223
     6d8:	80 81       	ld	r24, Z
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	28 17       	cp	r18, r24
     6de:	39 07       	cpc	r19, r25
     6e0:	18 f4       	brcc	.+6      	; 0x6e8 <udi_cdc_rx_start+0x3e>
     6e2:	4f bf       	out	0x3f, r20	; 63
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	23 c0       	rjmp	.+70     	; 0x72e <udi_cdc_rx_start+0x84>
     6e8:	10 92 98 20 	sts	0x2098, r1
     6ec:	10 92 99 20 	sts	0x2099, r1
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	51 11       	cpse	r21, r1
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	80 93 9a 20 	sts	0x209A, r24
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 97 20 	sts	0x2097, r24
     700:	4f bf       	out	0x3f, r20	; 63
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	cb df       	rcall	.-106    	; 0x69c <udi_cdc_multi_is_rx_ready>
     706:	ae 01       	movw	r20, r28
     708:	00 24       	eor	r0, r0
     70a:	56 95       	lsr	r21
     70c:	47 95       	ror	r20
     70e:	07 94       	ror	r0
     710:	56 95       	lsr	r21
     712:	47 95       	ror	r20
     714:	07 94       	ror	r0
     716:	54 2f       	mov	r21, r20
     718:	40 2d       	mov	r20, r0
     71a:	42 5c       	subi	r20, 0xC2	; 194
     71c:	5e 4d       	sbci	r21, 0xDE	; 222
     71e:	0c e9       	ldi	r16, 0x9C	; 156
     720:	13 e0       	ldi	r17, 0x03	; 3
     722:	20 e4       	ldi	r18, 0x40	; 64
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	0e 94 80 0c 	call	0x1900	; 0x1900 <udd_ep_run>
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <udi_cdc_data_received>:
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	a4 2f       	mov	r26, r20
     73e:	89 2b       	or	r24, r25
     740:	49 f5       	brne	.+82     	; 0x794 <udi_cdc_data_received+0x5c>
     742:	80 91 9a 20 	lds	r24, 0x209A
     746:	e1 e0       	ldi	r30, 0x01	; 1
     748:	81 11       	cpse	r24, r1
     74a:	e0 e0       	ldi	r30, 0x00	; 0
     74c:	61 15       	cp	r22, r1
     74e:	71 05       	cpc	r23, r1
     750:	b1 f4       	brne	.+44     	; 0x77e <udi_cdc_data_received+0x46>
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	00 24       	eor	r0, r0
     756:	f6 95       	lsr	r31
     758:	e7 95       	ror	r30
     75a:	07 94       	ror	r0
     75c:	f6 95       	lsr	r31
     75e:	e7 95       	ror	r30
     760:	07 94       	ror	r0
     762:	fe 2f       	mov	r31, r30
     764:	e0 2d       	mov	r30, r0
     766:	af 01       	movw	r20, r30
     768:	42 5c       	subi	r20, 0xC2	; 194
     76a:	5e 4d       	sbci	r21, 0xDE	; 222
     76c:	0c e9       	ldi	r16, 0x9C	; 156
     76e:	13 e0       	ldi	r17, 0x03	; 3
     770:	20 e4       	ldi	r18, 0x40	; 64
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	8a 2f       	mov	r24, r26
     778:	0e 94 80 0c 	call	0x1900	; 0x1900 <udd_ep_run>
     77c:	0b c0       	rjmp	.+22     	; 0x794 <udi_cdc_data_received+0x5c>
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	e9 54       	subi	r30, 0x49	; 73
     786:	ff 4d       	sbci	r31, 0xDF	; 223
     788:	60 83       	st	Z, r22
     78a:	71 83       	std	Z+1, r23	; 0x01
     78c:	10 92 97 20 	sts	0x2097, r1
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	8b df       	rcall	.-234    	; 0x6aa <udi_cdc_rx_start>
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	08 95       	ret

0000079a <udi_cdc_data_enable>:
     79a:	10 92 9c 20 	sts	0x209C, r1
     79e:	10 92 95 20 	sts	0x2095, r1
     7a2:	10 92 94 20 	sts	0x2094, r1
     7a6:	10 92 96 20 	sts	0x2096, r1
     7aa:	10 92 b1 20 	sts	0x20B1, r1
     7ae:	10 92 b2 20 	sts	0x20B2, r1
     7b2:	10 92 b3 20 	sts	0x20B3, r1
     7b6:	10 92 b4 20 	sts	0x20B4, r1
     7ba:	10 92 b5 20 	sts	0x20B5, r1
     7be:	10 92 b6 20 	sts	0x20B6, r1
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	47 de       	rcall	.-882    	; 0x454 <udi_cdc_tx_send>
     7c6:	10 92 97 20 	sts	0x2097, r1
     7ca:	10 92 9a 20 	sts	0x209A, r1
     7ce:	10 92 b7 20 	sts	0x20B7, r1
     7d2:	10 92 b8 20 	sts	0x20B8, r1
     7d6:	10 92 98 20 	sts	0x2098, r1
     7da:	10 92 99 20 	sts	0x2099, r1
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	64 df       	rcall	.-312    	; 0x6aa <udi_cdc_rx_start>
     7e2:	88 23       	and	r24, r24
     7e4:	61 f0       	breq	.+24     	; 0x7fe <udi_cdc_data_enable+0x64>
     7e6:	80 91 9c 20 	lds	r24, 0x209C
     7ea:	8f 5f       	subi	r24, 0xFF	; 255
     7ec:	80 93 9c 20 	sts	0x209C, r24
     7f0:	80 91 9c 20 	lds	r24, 0x209C
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	29 f4       	brne	.+10     	; 0x802 <udi_cdc_data_enable+0x68>
     7f8:	80 93 9b 20 	sts	0x209B, r24
     7fc:	08 95       	ret
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	08 95       	ret
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	08 95       	ret

00000806 <udi_cdc_multi_get_free_tx_buffer>:
     806:	5f b7       	in	r21, 0x3f	; 63
     808:	f8 94       	cli
     80a:	20 91 96 20 	lds	r18, 0x2096
     80e:	e2 2f       	mov	r30, r18
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	ef 54       	subi	r30, 0x4F	; 79
     818:	ff 4d       	sbci	r31, 0xDF	; 223
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	21 11       	cpse	r18, r1
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	e4 2f       	mov	r30, r20
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	ee 0f       	add	r30, r30
     82a:	ff 1f       	adc	r31, r31
     82c:	ef 54       	subi	r30, 0x4F	; 79
     82e:	ff 4d       	sbci	r31, 0xDF	; 223
     830:	20 81       	ld	r18, Z
     832:	31 81       	ldd	r19, Z+1	; 0x01
     834:	80 34       	cpi	r24, 0x40	; 64
     836:	91 05       	cpc	r25, r1
     838:	89 f4       	brne	.+34     	; 0x85c <udi_cdc_multi_get_free_tx_buffer+0x56>
     83a:	60 91 95 20 	lds	r22, 0x2095
     83e:	61 11       	cpse	r22, r1
     840:	0d c0       	rjmp	.+26     	; 0x85c <udi_cdc_multi_get_free_tx_buffer+0x56>
     842:	60 91 94 20 	lds	r22, 0x2094
     846:	61 11       	cpse	r22, r1
     848:	09 c0       	rjmp	.+18     	; 0x85c <udi_cdc_multi_get_free_tx_buffer+0x56>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 94 20 	sts	0x2094, r24
     850:	40 93 96 20 	sts	0x2096, r20
     854:	20 e4       	ldi	r18, 0x40	; 64
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	5f bf       	out	0x3f, r21	; 63
     85e:	82 0f       	add	r24, r18
     860:	93 1f       	adc	r25, r19
     862:	20 e8       	ldi	r18, 0x80	; 128
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	28 1b       	sub	r18, r24
     868:	39 0b       	sbc	r19, r25
     86a:	82 2f       	mov	r24, r18
     86c:	93 2f       	mov	r25, r19
     86e:	08 95       	ret

00000870 <udi_cdc_multi_is_tx_ready>:
     870:	ca df       	rcall	.-108    	; 0x806 <udi_cdc_multi_get_free_tx_buffer>
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	89 2b       	or	r24, r25
     876:	09 f4       	brne	.+2      	; 0x87a <udi_cdc_multi_is_tx_ready+0xa>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	82 2f       	mov	r24, r18
     87c:	08 95       	ret

0000087e <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	eb 01       	movw	r28, r22

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     886:	11 e0       	ldi	r17, 0x01	; 1
     888:	80 91 b0 20 	lds	r24, 0x20B0
     88c:	89 30       	cpi	r24, 0x09	; 9
     88e:	09 f0       	breq	.+2      	; 0x892 <udi_cdc_multi_putc+0x14>
     890:	10 e0       	ldi	r17, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	ed df       	rcall	.-38     	; 0x870 <udi_cdc_multi_is_tx_ready>
     896:	81 11       	cpse	r24, r1
     898:	07 c0       	rjmp	.+14     	; 0x8a8 <udi_cdc_multi_putc+0x2a>
		if (!udi_cdc_data_running) {
     89a:	80 91 9b 20 	lds	r24, 0x209B
     89e:	81 11       	cpse	r24, r1
     8a0:	f8 cf       	rjmp	.-16     	; 0x892 <udi_cdc_multi_putc+0x14>
			return false;
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	28 c0       	rjmp	.+80     	; 0x8f8 <udi_cdc_multi_putc+0x7a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     8a8:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     8aa:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8ac:	20 91 96 20 	lds	r18, 0x2096
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	f9 01       	movw	r30, r18
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	ef 54       	subi	r30, 0x4F	; 79
     8ba:	ff 4d       	sbci	r31, 0xDF	; 223
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	d9 01       	movw	r26, r18
     8c2:	00 24       	eor	r0, r0
     8c4:	b6 95       	lsr	r27
     8c6:	a7 95       	ror	r26
     8c8:	07 94       	ror	r0
     8ca:	b6 95       	lsr	r27
     8cc:	a7 95       	ror	r26
     8ce:	07 94       	ror	r0
     8d0:	ba 2f       	mov	r27, r26
     8d2:	a0 2d       	mov	r26, r0
     8d4:	a8 0f       	add	r26, r24
     8d6:	b9 1f       	adc	r27, r25
     8d8:	a2 54       	subi	r26, 0x42	; 66
     8da:	bf 4d       	sbci	r27, 0xDF	; 223
     8dc:	cc 93       	st	X, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	80 83       	st	Z, r24
     8e2:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8e4:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     8e6:	11 23       	and	r17, r17
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <udi_cdc_multi_putc+0x76>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     8ea:	cd 2f       	mov	r28, r29
     8ec:	dd 0f       	add	r29, r29
     8ee:	dd 0b       	sbc	r29, r29
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     8f0:	10 e0       	ldi	r17, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     8f2:	cf cf       	rjmp	.-98     	; 0x892 <udi_cdc_multi_putc+0x14>
	}
	return true;
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	30 e0       	ldi	r19, 0x00	; 0
}
     8f8:	82 2f       	mov	r24, r18
     8fa:	93 2f       	mov	r25, r19
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	08 95       	ret

00000904 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     904:	bc 01       	movw	r22, r24
     906:	80 e0       	ldi	r24, 0x00	; 0
}
     908:	ba cf       	rjmp	.-140    	; 0x87e <udi_cdc_multi_putc>

0000090a <udc_get_eof_conf>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     90a:	e0 91 c1 21 	lds	r30, 0x21C1
     90e:	f0 91 c2 21 	lds	r31, 0x21C2
     912:	01 90       	ld	r0, Z+
     914:	f0 81       	ld	r31, Z
     916:	e0 2d       	mov	r30, r0
     918:	22 81       	ldd	r18, Z+2	; 0x02
     91a:	33 81       	ldd	r19, Z+3	; 0x03
     91c:	2e 0f       	add	r18, r30
     91e:	3f 1f       	adc	r19, r31
     920:	82 2f       	mov	r24, r18
     922:	93 2f       	mov	r25, r19
     924:	08 95       	ret

00000926 <udc_next_desc_in_iface>:
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	ec 01       	movw	r28, r24
     92e:	16 2f       	mov	r17, r22
     930:	ec df       	rcall	.-40     	; 0x90a <udc_get_eof_conf>
     932:	28 81       	ld	r18, Y
     934:	fe 01       	movw	r30, r28
     936:	e2 0f       	add	r30, r18
     938:	f1 1d       	adc	r31, r1
     93a:	e8 17       	cp	r30, r24
     93c:	f9 07       	cpc	r31, r25
     93e:	a0 f4       	brcc	.+40     	; 0x968 <udc_next_desc_in_iface+0x42>
     940:	21 81       	ldd	r18, Z+1	; 0x01
     942:	24 30       	cpi	r18, 0x04	; 4
     944:	a1 f0       	breq	.+40     	; 0x96e <udc_next_desc_in_iface+0x48>
     946:	21 13       	cpse	r18, r17
     948:	06 c0       	rjmp	.+12     	; 0x956 <udc_next_desc_in_iface+0x30>
     94a:	16 c0       	rjmp	.+44     	; 0x978 <udc_next_desc_in_iface+0x52>
     94c:	21 81       	ldd	r18, Z+1	; 0x01
     94e:	24 30       	cpi	r18, 0x04	; 4
     950:	89 f0       	breq	.+34     	; 0x974 <udc_next_desc_in_iface+0x4e>
     952:	21 17       	cp	r18, r17
     954:	89 f0       	breq	.+34     	; 0x978 <udc_next_desc_in_iface+0x52>
     956:	20 81       	ld	r18, Z
     958:	e2 0f       	add	r30, r18
     95a:	f1 1d       	adc	r31, r1
     95c:	e8 17       	cp	r30, r24
     95e:	f9 07       	cpc	r31, r25
     960:	a8 f3       	brcs	.-22     	; 0x94c <udc_next_desc_in_iface+0x26>
     962:	e0 e0       	ldi	r30, 0x00	; 0
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	08 c0       	rjmp	.+16     	; 0x978 <udc_next_desc_in_iface+0x52>
     968:	e0 e0       	ldi	r30, 0x00	; 0
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	05 c0       	rjmp	.+10     	; 0x978 <udc_next_desc_in_iface+0x52>
     96e:	e0 e0       	ldi	r30, 0x00	; 0
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	02 c0       	rjmp	.+4      	; 0x978 <udc_next_desc_in_iface+0x52>
     974:	e0 e0       	ldi	r30, 0x00	; 0
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	8e 2f       	mov	r24, r30
     97a:	9f 2f       	mov	r25, r31
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	08 95       	ret

00000984 <udc_update_iface_desc>:
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	18 2f       	mov	r17, r24
     98e:	06 2f       	mov	r16, r22
     990:	80 91 c0 21 	lds	r24, 0x21C0
     994:	88 23       	and	r24, r24
     996:	69 f1       	breq	.+90     	; 0x9f2 <udc_update_iface_desc+0x6e>
     998:	e0 91 c1 21 	lds	r30, 0x21C1
     99c:	f0 91 c2 21 	lds	r31, 0x21C2
     9a0:	c0 81       	ld	r28, Z
     9a2:	d1 81       	ldd	r29, Z+1	; 0x01
     9a4:	8c 81       	ldd	r24, Y+4	; 0x04
     9a6:	18 17       	cp	r17, r24
     9a8:	30 f5       	brcc	.+76     	; 0x9f6 <udc_update_iface_desc+0x72>
     9aa:	c0 93 be 21 	sts	0x21BE, r28
     9ae:	d0 93 bf 21 	sts	0x21BF, r29
     9b2:	ab df       	rcall	.-170    	; 0x90a <udc_get_eof_conf>
     9b4:	9c 01       	movw	r18, r24
     9b6:	c8 17       	cp	r28, r24
     9b8:	d9 07       	cpc	r29, r25
     9ba:	f8 f4       	brcc	.+62     	; 0x9fa <udc_update_iface_desc+0x76>
     9bc:	99 81       	ldd	r25, Y+1	; 0x01
     9be:	94 30       	cpi	r25, 0x04	; 4
     9c0:	61 f4       	brne	.+24     	; 0x9da <udc_update_iface_desc+0x56>
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	91 13       	cpse	r25, r17
     9c6:	09 c0       	rjmp	.+18     	; 0x9da <udc_update_iface_desc+0x56>
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ca:	80 13       	cpse	r24, r16
     9cc:	06 c0       	rjmp	.+12     	; 0x9da <udc_update_iface_desc+0x56>
     9ce:	c0 93 be 21 	sts	0x21BE, r28
     9d2:	d0 93 bf 21 	sts	0x21BF, r29
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	11 c0       	rjmp	.+34     	; 0x9fc <udc_update_iface_desc+0x78>
     9da:	98 81       	ld	r25, Y
     9dc:	c9 0f       	add	r28, r25
     9de:	d1 1d       	adc	r29, r1
     9e0:	c2 17       	cp	r28, r18
     9e2:	d3 07       	cpc	r29, r19
     9e4:	58 f3       	brcs	.-42     	; 0x9bc <udc_update_iface_desc+0x38>
     9e6:	c0 93 be 21 	sts	0x21BE, r28
     9ea:	d0 93 bf 21 	sts	0x21BF, r29
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <udc_update_iface_desc+0x78>
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <udc_update_iface_desc+0x78>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <udc_update_iface_desc+0x78>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	08 95       	ret

00000a06 <udc_valid_address>:
     a06:	80 91 fd 22 	lds	r24, 0x22FD
     a0a:	8f 77       	andi	r24, 0x7F	; 127
     a0c:	17 c7       	rjmp	.+3630   	; 0x183c <udd_set_address>

00000a0e <udc_iface_enable>:
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	18 2f       	mov	r17, r24
     a16:	b6 df       	rcall	.-148    	; 0x984 <udc_update_iface_desc>
     a18:	88 23       	and	r24, r24
     a1a:	41 f1       	breq	.+80     	; 0xa6c <udc_iface_enable+0x5e>
     a1c:	c0 91 be 21 	lds	r28, 0x21BE
     a20:	d0 91 bf 21 	lds	r29, 0x21BF
     a24:	65 e0       	ldi	r22, 0x05	; 5
     a26:	ce 01       	movw	r24, r28
     a28:	7e df       	rcall	.-260    	; 0x926 <udc_next_desc_in_iface>
     a2a:	ec 01       	movw	r28, r24
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	41 f0       	breq	.+16     	; 0xa40 <udc_iface_enable+0x32>
     a30:	4c 81       	ldd	r20, Y+4	; 0x04
     a32:	5d 81       	ldd	r21, Y+5	; 0x05
     a34:	6b 81       	ldd	r22, Y+3	; 0x03
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	1a d7       	rcall	.+3636   	; 0x186e <udd_ep_alloc>
     a3a:	81 11       	cpse	r24, r1
     a3c:	f3 cf       	rjmp	.-26     	; 0xa24 <udc_iface_enable+0x16>
     a3e:	17 c0       	rjmp	.+46     	; 0xa6e <udc_iface_enable+0x60>
     a40:	a0 91 c1 21 	lds	r26, 0x21C1
     a44:	b0 91 c2 21 	lds	r27, 0x21C2
     a48:	81 2f       	mov	r24, r17
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	12 96       	adiw	r26, 0x02	; 2
     a52:	ed 91       	ld	r30, X+
     a54:	fc 91       	ld	r31, X
     a56:	13 97       	sbiw	r26, 0x03	; 3
     a58:	e8 0f       	add	r30, r24
     a5a:	f9 1f       	adc	r31, r25
     a5c:	01 90       	ld	r0, Z+
     a5e:	f0 81       	ld	r31, Z
     a60:	e0 2d       	mov	r30, r0
     a62:	01 90       	ld	r0, Z+
     a64:	f0 81       	ld	r31, Z
     a66:	e0 2d       	mov	r30, r0
     a68:	09 95       	icall
     a6a:	01 c0       	rjmp	.+2      	; 0xa6e <udc_iface_enable+0x60>
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	08 95       	ret

00000a76 <udc_iface_disable>:
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	c8 2f       	mov	r28, r24
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	80 df       	rcall	.-256    	; 0x984 <udc_update_iface_desc>
     a84:	88 23       	and	r24, r24
     a86:	81 f1       	breq	.+96     	; 0xae8 <udc_iface_disable+0x72>
     a88:	a0 91 c1 21 	lds	r26, 0x21C1
     a8c:	b0 91 c2 21 	lds	r27, 0x21C2
     a90:	ec 2f       	mov	r30, r28
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	ee 0f       	add	r30, r30
     a96:	ff 1f       	adc	r31, r31
     a98:	12 96       	adiw	r26, 0x02	; 2
     a9a:	2d 91       	ld	r18, X+
     a9c:	3c 91       	ld	r19, X
     a9e:	13 97       	sbiw	r26, 0x03	; 3
     aa0:	e2 0f       	add	r30, r18
     aa2:	f3 1f       	adc	r31, r19
     aa4:	00 81       	ld	r16, Z
     aa6:	11 81       	ldd	r17, Z+1	; 0x01
     aa8:	d8 01       	movw	r26, r16
     aaa:	16 96       	adiw	r26, 0x06	; 6
     aac:	ed 91       	ld	r30, X+
     aae:	fc 91       	ld	r31, X
     ab0:	17 97       	sbiw	r26, 0x07	; 7
     ab2:	09 95       	icall
     ab4:	68 2f       	mov	r22, r24
     ab6:	8c 2f       	mov	r24, r28
     ab8:	65 df       	rcall	.-310    	; 0x984 <udc_update_iface_desc>
     aba:	88 23       	and	r24, r24
     abc:	b9 f0       	breq	.+46     	; 0xaec <udc_iface_disable+0x76>
     abe:	c0 91 be 21 	lds	r28, 0x21BE
     ac2:	d0 91 bf 21 	lds	r29, 0x21BF
     ac6:	65 e0       	ldi	r22, 0x05	; 5
     ac8:	ce 01       	movw	r24, r28
     aca:	2d df       	rcall	.-422    	; 0x926 <udc_next_desc_in_iface>
     acc:	ec 01       	movw	r28, r24
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	19 f0       	breq	.+6      	; 0xad8 <udc_iface_disable+0x62>
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	c3 d7       	rcall	.+3974   	; 0x1a5c <udd_ep_free>
     ad6:	f7 cf       	rjmp	.-18     	; 0xac6 <udc_iface_disable+0x50>
     ad8:	d8 01       	movw	r26, r16
     ada:	12 96       	adiw	r26, 0x02	; 2
     adc:	ed 91       	ld	r30, X+
     ade:	fc 91       	ld	r31, X
     ae0:	13 97       	sbiw	r26, 0x03	; 3
     ae2:	09 95       	icall
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <udc_iface_disable+0x78>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	01 c0       	rjmp	.+2      	; 0xaee <udc_iface_disable+0x78>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <udc_start>:
     af8:	2d c6       	rjmp	.+3162   	; 0x1754 <udd_enable>
     afa:	08 95       	ret

00000afc <udc_reset>:
     afc:	cf 93       	push	r28
     afe:	80 91 c0 21 	lds	r24, 0x21C0
     b02:	88 23       	and	r24, r24
     b04:	c1 f0       	breq	.+48     	; 0xb36 <udc_reset+0x3a>
     b06:	e0 91 c1 21 	lds	r30, 0x21C1
     b0a:	f0 91 c2 21 	lds	r31, 0x21C2
     b0e:	01 90       	ld	r0, Z+
     b10:	f0 81       	ld	r31, Z
     b12:	e0 2d       	mov	r30, r0
     b14:	84 81       	ldd	r24, Z+4	; 0x04
     b16:	88 23       	and	r24, r24
     b18:	71 f0       	breq	.+28     	; 0xb36 <udc_reset+0x3a>
     b1a:	c0 e0       	ldi	r28, 0x00	; 0
     b1c:	8c 2f       	mov	r24, r28
     b1e:	ab df       	rcall	.-170    	; 0xa76 <udc_iface_disable>
     b20:	cf 5f       	subi	r28, 0xFF	; 255
     b22:	e0 91 c1 21 	lds	r30, 0x21C1
     b26:	f0 91 c2 21 	lds	r31, 0x21C2
     b2a:	01 90       	ld	r0, Z+
     b2c:	f0 81       	ld	r31, Z
     b2e:	e0 2d       	mov	r30, r0
     b30:	84 81       	ldd	r24, Z+4	; 0x04
     b32:	c8 17       	cp	r28, r24
     b34:	98 f3       	brcs	.-26     	; 0xb1c <udc_reset+0x20>
     b36:	10 92 c0 21 	sts	0x21C0, r1
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	80 93 c3 21 	sts	0x21C3, r24
     b42:	90 93 c4 21 	sts	0x21C4, r25
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     b4a:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     b4c:	80 91 c0 21 	lds	r24, 0x21C0
     b50:	88 23       	and	r24, r24
     b52:	41 f1       	breq	.+80     	; 0xba4 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b54:	e0 91 c1 21 	lds	r30, 0x21C1
     b58:	f0 91 c2 21 	lds	r31, 0x21C2
     b5c:	a0 81       	ld	r26, Z
     b5e:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b60:	14 96       	adiw	r26, 0x04	; 4
     b62:	8c 91       	ld	r24, X
     b64:	88 23       	and	r24, r24
     b66:	f1 f0       	breq	.+60     	; 0xba4 <udc_sof_notify+0x5a>
     b68:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b6a:	8c 2f       	mov	r24, r28
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	02 80       	ldd	r0, Z+2	; 0x02
     b74:	f3 81       	ldd	r31, Z+3	; 0x03
     b76:	e0 2d       	mov	r30, r0
     b78:	e8 0f       	add	r30, r24
     b7a:	f9 1f       	adc	r31, r25
     b7c:	01 90       	ld	r0, Z+
     b7e:	f0 81       	ld	r31, Z
     b80:	e0 2d       	mov	r30, r0
     b82:	00 84       	ldd	r0, Z+8	; 0x08
     b84:	f1 85       	ldd	r31, Z+9	; 0x09
     b86:	e0 2d       	mov	r30, r0
     b88:	30 97       	sbiw	r30, 0x00	; 0
     b8a:	09 f0       	breq	.+2      	; 0xb8e <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     b8c:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     b8e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b90:	e0 91 c1 21 	lds	r30, 0x21C1
     b94:	f0 91 c2 21 	lds	r31, 0x21C2
     b98:	a0 81       	ld	r26, Z
     b9a:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b9c:	14 96       	adiw	r26, 0x04	; 4
     b9e:	8c 91       	ld	r24, X
     ba0:	c8 17       	cp	r28, r24
     ba2:	18 f3       	brcs	.-58     	; 0xb6a <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     bb2:	10 92 05 23 	sts	0x2305, r1
     bb6:	10 92 06 23 	sts	0x2306, r1
	udd_g_ctrlreq.callback = NULL;
     bba:	10 92 07 23 	sts	0x2307, r1
     bbe:	10 92 08 23 	sts	0x2308, r1
	udd_g_ctrlreq.over_under_run = NULL;
     bc2:	10 92 09 23 	sts	0x2309, r1
     bc6:	10 92 0a 23 	sts	0x230A, r1

	if (Udd_setup_is_in()) {
     bca:	20 91 fb 22 	lds	r18, 0x22FB
     bce:	22 23       	and	r18, r18
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <udc_process_setup+0x2c>
     bd2:	6a c2       	rjmp	.+1236   	; 0x10a8 <udc_process_setup+0x500>
		if (udd_g_ctrlreq.req.wLength == 0) {
     bd4:	80 91 01 23 	lds	r24, 0x2301
     bd8:	90 91 02 23 	lds	r25, 0x2302
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	09 f0       	breq	.+2      	; 0xbe2 <udc_process_setup+0x3a>
     be0:	68 c2       	rjmp	.+1232   	; 0x10b2 <udc_process_setup+0x50a>
     be2:	5a c2       	rjmp	.+1204   	; 0x1098 <udc_process_setup+0x4f0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     be4:	2f 71       	andi	r18, 0x1F	; 31
     be6:	09 f0       	breq	.+2      	; 0xbea <udc_process_setup+0x42>
     be8:	94 c0       	rjmp	.+296    	; 0xd12 <udc_process_setup+0x16a>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     bea:	30 91 fc 22 	lds	r19, 0x22FC
     bee:	36 30       	cpi	r19, 0x06	; 6
     bf0:	81 f0       	breq	.+32     	; 0xc12 <udc_process_setup+0x6a>
     bf2:	38 30       	cpi	r19, 0x08	; 8
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <udc_process_setup+0x50>
     bf6:	82 c0       	rjmp	.+260    	; 0xcfc <udc_process_setup+0x154>
     bf8:	31 11       	cpse	r19, r1
     bfa:	8b c0       	rjmp	.+278    	; 0xd12 <udc_process_setup+0x16a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     bfc:	02 97       	sbiw	r24, 0x02	; 2
     bfe:	39 f4       	brne	.+14     	; 0xc0e <udc_process_setup+0x66>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c00:	62 e0       	ldi	r22, 0x02	; 2
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	83 ec       	ldi	r24, 0xC3	; 195
     c06:	91 e2       	ldi	r25, 0x21	; 33
     c08:	29 d6       	rcall	.+3154   	; 0x185c <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	ce c1       	rjmp	.+924    	; 0xfaa <udc_process_setup+0x402>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	cc c1       	rjmp	.+920    	; 0xfaa <udc_process_setup+0x402>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     c12:	20 91 fd 22 	lds	r18, 0x22FD
     c16:	30 91 fe 22 	lds	r19, 0x22FE
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     c1a:	83 2f       	mov	r24, r19
     c1c:	99 27       	eor	r25, r25
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	91 05       	cpc	r25, r1
     c22:	79 f0       	breq	.+30     	; 0xc42 <udc_process_setup+0x9a>
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	91 05       	cpc	r25, r1
     c28:	69 f1       	breq	.+90     	; 0xc84 <udc_process_setup+0xdc>
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	09 f0       	breq	.+2      	; 0xc30 <udc_process_setup+0x88>
     c2e:	5e c0       	rjmp	.+188    	; 0xcec <udc_process_setup+0x144>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     c30:	80 91 14 20 	lds	r24, 0x2014
     c34:	90 91 15 20 	lds	r25, 0x2015
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     c38:	dc 01       	movw	r26, r24
     c3a:	6c 91       	ld	r22, X
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	0e d6       	rcall	.+3100   	; 0x185c <udd_set_setup_payload>
     c40:	44 c0       	rjmp	.+136    	; 0xcca <udc_process_setup+0x122>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     c42:	e0 91 14 20 	lds	r30, 0x2014
     c46:	f0 91 15 20 	lds	r31, 0x2015
     c4a:	81 89       	ldd	r24, Z+17	; 0x11
     c4c:	28 17       	cp	r18, r24
     c4e:	08 f0       	brcs	.+2      	; 0xc52 <udc_process_setup+0xaa>
     c50:	4f c0       	rjmp	.+158    	; 0xcf0 <udc_process_setup+0x148>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     c52:	c9 01       	movw	r24, r18
     c54:	99 27       	eor	r25, r25
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	e0 91 16 20 	lds	r30, 0x2016
     c62:	f0 91 17 20 	lds	r31, 0x2017
     c66:	e8 0f       	add	r30, r24
     c68:	f9 1f       	adc	r31, r25
     c6a:	80 81       	ld	r24, Z
     c6c:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     c6e:	fc 01       	movw	r30, r24
     c70:	62 81       	ldd	r22, Z+2	; 0x02
     c72:	73 81       	ldd	r23, Z+3	; 0x03
     c74:	f3 d5       	rcall	.+3046   	; 0x185c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     c76:	e0 91 03 23 	lds	r30, 0x2303
     c7a:	f0 91 04 23 	lds	r31, 0x2304
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	81 83       	std	Z+1, r24	; 0x01
     c82:	23 c0       	rjmp	.+70     	; 0xcca <udc_process_setup+0x122>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     c84:	33 27       	eor	r19, r19
     c86:	21 15       	cp	r18, r1
     c88:	31 05       	cpc	r19, r1
     c8a:	21 f0       	breq	.+8      	; 0xc94 <udc_process_setup+0xec>
     c8c:	23 30       	cpi	r18, 0x03	; 3
     c8e:	31 05       	cpc	r19, r1
     c90:	89 f5       	brne	.+98     	; 0xcf4 <udc_process_setup+0x14c>
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <udc_process_setup+0xf8>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     c94:	64 e0       	ldi	r22, 0x04	; 4
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	86 e7       	ldi	r24, 0x76	; 118
     c9a:	90 e2       	ldi	r25, 0x20	; 32
     c9c:	df d5       	rcall	.+3006   	; 0x185c <udd_set_setup_payload>
     c9e:	15 c0       	rjmp	.+42     	; 0xcca <udc_process_setup+0x122>
     ca0:	aa e8       	ldi	r26, 0x8A	; 138
     ca2:	b0 e2       	ldi	r27, 0x20	; 32
     ca4:	ec e7       	ldi	r30, 0x7C	; 124
     ca6:	f0 e2       	ldi	r31, 0x20	; 32
 * internally. The interface requests are sent to UDI, and the specific request
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
     ca8:	81 e9       	ldi	r24, 0x91	; 145
     caa:	90 e2       	ldi	r25, 0x20	; 32
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     cac:	2d 91       	ld	r18, X+
     cae:	20 83       	st	Z, r18
     cb0:	11 82       	std	Z+1, r1	; 0x01
     cb2:	32 96       	adiw	r30, 0x02	; 2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     cb4:	a8 17       	cp	r26, r24
     cb6:	b9 07       	cpc	r27, r25
     cb8:	c9 f7       	brne	.-14     	; 0xcac <udc_process_setup+0x104>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     cba:	80 e1       	ldi	r24, 0x10	; 16
     cbc:	80 93 7a 20 	sts	0x207A, r24
		udd_set_setup_payload(
     cc0:	60 e1       	ldi	r22, 0x10	; 16
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	8a e7       	ldi	r24, 0x7A	; 122
     cc6:	90 e2       	ldi	r25, 0x20	; 32
     cc8:	c9 d5       	rcall	.+2962   	; 0x185c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     cca:	80 91 01 23 	lds	r24, 0x2301
     cce:	90 91 02 23 	lds	r25, 0x2302
     cd2:	20 91 05 23 	lds	r18, 0x2305
     cd6:	30 91 06 23 	lds	r19, 0x2306
     cda:	82 17       	cp	r24, r18
     cdc:	93 07       	cpc	r25, r19
     cde:	60 f4       	brcc	.+24     	; 0xcf8 <udc_process_setup+0x150>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     ce0:	80 93 05 23 	sts	0x2305, r24
     ce4:	90 93 06 23 	sts	0x2306, r25
	}
	return true;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	5f c1       	rjmp	.+702    	; 0xfaa <udc_process_setup+0x402>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	5d c1       	rjmp	.+698    	; 0xfaa <udc_process_setup+0x402>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	5b c1       	rjmp	.+694    	; 0xfaa <udc_process_setup+0x402>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	59 c1       	rjmp	.+690    	; 0xfaa <udc_process_setup+0x402>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	57 c1       	rjmp	.+686    	; 0xfaa <udc_process_setup+0x402>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	39 f4       	brne	.+14     	; 0xd0e <udc_process_setup+0x166>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	80 ec       	ldi	r24, 0xC0	; 192
     d06:	91 e2       	ldi	r25, 0x21	; 33
     d08:	a9 d5       	rcall	.+2898   	; 0x185c <udd_set_setup_payload>
	return true;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	4e c1       	rjmp	.+668    	; 0xfaa <udc_process_setup+0x402>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	4c c1       	rjmp	.+664    	; 0xfaa <udc_process_setup+0x402>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d12:	21 30       	cpi	r18, 0x01	; 1
     d14:	09 f0       	breq	.+2      	; 0xd18 <udc_process_setup+0x170>
     d16:	40 c0       	rjmp	.+128    	; 0xd98 <udc_process_setup+0x1f0>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d18:	30 91 fc 22 	lds	r19, 0x22FC
     d1c:	3a 30       	cpi	r19, 0x0A	; 10
     d1e:	e1 f5       	brne	.+120    	; 0xd98 <udc_process_setup+0x1f0>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	91 f5       	brne	.+100    	; 0xd88 <udc_process_setup+0x1e0>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d24:	80 91 c0 21 	lds	r24, 0x21C0
     d28:	88 23       	and	r24, r24
     d2a:	81 f1       	breq	.+96     	; 0xd8c <udc_process_setup+0x1e4>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d2c:	c0 91 ff 22 	lds	r28, 0x22FF
     d30:	d0 91 00 23 	lds	r29, 0x2300
     d34:	8c 2f       	mov	r24, r28
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d36:	00 91 c1 21 	lds	r16, 0x21C1
     d3a:	10 91 c2 21 	lds	r17, 0x21C2
     d3e:	d8 01       	movw	r26, r16
     d40:	ed 91       	ld	r30, X+
     d42:	fc 91       	ld	r31, X
     d44:	94 81       	ldd	r25, Z+4	; 0x04
     d46:	c9 17       	cp	r28, r25
     d48:	18 f5       	brcc	.+70     	; 0xd90 <udc_process_setup+0x1e8>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	1b de       	rcall	.-970    	; 0x984 <udc_update_iface_desc>
     d4e:	88 23       	and	r24, r24
     d50:	09 f1       	breq	.+66     	; 0xd94 <udc_process_setup+0x1ec>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d52:	ce 01       	movw	r24, r28
     d54:	99 27       	eor	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	d8 01       	movw	r26, r16
     d5c:	12 96       	adiw	r26, 0x02	; 2
     d5e:	ed 91       	ld	r30, X+
     d60:	fc 91       	ld	r31, X
     d62:	13 97       	sbiw	r26, 0x03	; 3
     d64:	e8 0f       	add	r30, r24
     d66:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     d68:	01 90       	ld	r0, Z+
     d6a:	f0 81       	ld	r31, Z
     d6c:	e0 2d       	mov	r30, r0
     d6e:	86 81       	ldd	r24, Z+6	; 0x06
     d70:	97 81       	ldd	r25, Z+7	; 0x07
     d72:	fc 01       	movw	r30, r24
     d74:	09 95       	icall
     d76:	80 93 c5 21 	sts	0x21C5, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	85 ec       	ldi	r24, 0xC5	; 197
     d80:	91 e2       	ldi	r25, 0x21	; 33
     d82:	6c d5       	rcall	.+2776   	; 0x185c <udd_set_setup_payload>
	return true;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	11 c1       	rjmp	.+546    	; 0xfaa <udc_process_setup+0x402>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0f c1       	rjmp	.+542    	; 0xfaa <udc_process_setup+0x402>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0d c1       	rjmp	.+538    	; 0xfaa <udc_process_setup+0x402>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	0b c1       	rjmp	.+534    	; 0xfaa <udc_process_setup+0x402>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	09 c1       	rjmp	.+530    	; 0xfaa <udc_process_setup+0x402>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	09 f0       	breq	.+2      	; 0xd9e <udc_process_setup+0x1f6>
     d9c:	08 c1       	rjmp	.+528    	; 0xfae <udc_process_setup+0x406>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     d9e:	20 91 fc 22 	lds	r18, 0x22FC
     da2:	21 11       	cpse	r18, r1
     da4:	fd c0       	rjmp	.+506    	; 0xfa0 <udc_process_setup+0x3f8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     da6:	02 97       	sbiw	r24, 0x02	; 2
     da8:	71 f4       	brne	.+28     	; 0xdc6 <udc_process_setup+0x21e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     daa:	80 91 ff 22 	lds	r24, 0x22FF
     dae:	88 d5       	rcall	.+2832   	; 0x18c0 <udd_ep_is_halted>
     db0:	80 93 c6 21 	sts	0x21C6, r24
     db4:	10 92 c7 21 	sts	0x21C7, r1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     db8:	62 e0       	ldi	r22, 0x02	; 2
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	86 ec       	ldi	r24, 0xC6	; 198
     dbe:	91 e2       	ldi	r25, 0x21	; 33
     dc0:	4d d5       	rcall	.+2714   	; 0x185c <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	f2 c0       	rjmp	.+484    	; 0xfaa <udc_process_setup+0x402>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	f0 c0       	rjmp	.+480    	; 0xfaa <udc_process_setup+0x402>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     dca:	2f 71       	andi	r18, 0x1F	; 31
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <udc_process_setup+0x228>
     dce:	92 c0       	rjmp	.+292    	; 0xef4 <udc_process_setup+0x34c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     dd0:	80 91 fc 22 	lds	r24, 0x22FC
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	09 f4       	brne	.+2      	; 0xdda <udc_process_setup+0x232>
     dd8:	e5 c0       	rjmp	.+458    	; 0xfa4 <udc_process_setup+0x3fc>
     dda:	20 f4       	brcc	.+8      	; 0xde4 <udc_process_setup+0x23c>
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	09 f0       	breq	.+2      	; 0xde2 <udc_process_setup+0x23a>
     de0:	89 c0       	rjmp	.+274    	; 0xef4 <udc_process_setup+0x34c>
     de2:	16 c0       	rjmp	.+44     	; 0xe10 <udc_process_setup+0x268>
     de4:	85 30       	cpi	r24, 0x05	; 5
     de6:	21 f0       	breq	.+8      	; 0xdf0 <udc_process_setup+0x248>
     de8:	89 30       	cpi	r24, 0x09	; 9
     dea:	09 f0       	breq	.+2      	; 0xdee <udc_process_setup+0x246>
     dec:	83 c0       	rjmp	.+262    	; 0xef4 <udc_process_setup+0x34c>
     dee:	2b c0       	rjmp	.+86     	; 0xe46 <udc_process_setup+0x29e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     df0:	80 91 01 23 	lds	r24, 0x2301
     df4:	90 91 02 23 	lds	r25, 0x2302
     df8:	89 2b       	or	r24, r25
     dfa:	41 f4       	brne	.+16     	; 0xe0c <udc_process_setup+0x264>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	95 e0       	ldi	r25, 0x05	; 5
     e00:	80 93 07 23 	sts	0x2307, r24
     e04:	90 93 08 23 	sts	0x2308, r25
	return true;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	cf c0       	rjmp	.+414    	; 0xfaa <udc_process_setup+0x402>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	cd c0       	rjmp	.+410    	; 0xfaa <udc_process_setup+0x402>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e10:	80 91 01 23 	lds	r24, 0x2301
     e14:	90 91 02 23 	lds	r25, 0x2302
     e18:	89 2b       	or	r24, r25
     e1a:	89 f4       	brne	.+34     	; 0xe3e <udc_process_setup+0x296>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     e1c:	80 91 fd 22 	lds	r24, 0x22FD
     e20:	90 91 fe 22 	lds	r25, 0x22FE
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	69 f4       	brne	.+26     	; 0xe42 <udc_process_setup+0x29a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     e28:	80 91 c3 21 	lds	r24, 0x21C3
     e2c:	90 91 c4 21 	lds	r25, 0x21C4
     e30:	8d 7f       	andi	r24, 0xFD	; 253
     e32:	80 93 c3 21 	sts	0x21C3, r24
     e36:	90 93 c4 21 	sts	0x21C4, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	b6 c0       	rjmp	.+364    	; 0xfaa <udc_process_setup+0x402>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	b4 c0       	rjmp	.+360    	; 0xfaa <udc_process_setup+0x402>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	b2 c0       	rjmp	.+356    	; 0xfaa <udc_process_setup+0x402>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     e46:	80 91 01 23 	lds	r24, 0x2301
     e4a:	90 91 02 23 	lds	r25, 0x2302
     e4e:	89 2b       	or	r24, r25
     e50:	09 f0       	breq	.+2      	; 0xe54 <udc_process_setup+0x2ac>
     e52:	44 c0       	rjmp	.+136    	; 0xedc <udc_process_setup+0x334>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     e54:	f6 d4       	rcall	.+2540   	; 0x1842 <udd_getaddress>
     e56:	88 23       	and	r24, r24
     e58:	09 f4       	brne	.+2      	; 0xe5c <udc_process_setup+0x2b4>
     e5a:	42 c0       	rjmp	.+132    	; 0xee0 <udc_process_setup+0x338>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e5c:	20 91 fd 22 	lds	r18, 0x22FD
     e60:	30 91 fe 22 	lds	r19, 0x22FE
     e64:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     e66:	e0 91 14 20 	lds	r30, 0x2014
     e6a:	f0 91 15 20 	lds	r31, 0x2015
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     e6e:	81 89       	ldd	r24, Z+17	; 0x11
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	82 17       	cp	r24, r18
     e74:	93 07       	cpc	r25, r19
     e76:	b0 f1       	brcs	.+108    	; 0xee4 <udc_process_setup+0x33c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     e78:	41 de       	rcall	.-894    	; 0xafc <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     e7a:	80 91 fd 22 	lds	r24, 0x22FD
     e7e:	90 91 fe 22 	lds	r25, 0x22FE
     e82:	80 93 c0 21 	sts	0x21C0, r24
	if (udc_num_configuration == 0) {
     e86:	88 23       	and	r24, r24
     e88:	79 f1       	breq	.+94     	; 0xee8 <udc_process_setup+0x340>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     e8a:	99 27       	eor	r25, r25
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	e0 91 16 20 	lds	r30, 0x2016
     e9a:	f0 91 17 20 	lds	r31, 0x2017
     e9e:	e8 0f       	add	r30, r24
     ea0:	f9 1f       	adc	r31, r25
     ea2:	e0 93 c1 21 	sts	0x21C1, r30
     ea6:	f0 93 c2 21 	sts	0x21C2, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     eaa:	01 90       	ld	r0, Z+
     eac:	f0 81       	ld	r31, Z
     eae:	e0 2d       	mov	r30, r0
     eb0:	84 81       	ldd	r24, Z+4	; 0x04
     eb2:	88 23       	and	r24, r24
     eb4:	d9 f0       	breq	.+54     	; 0xeec <udc_process_setup+0x344>
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	8c 2f       	mov	r24, r28
     ebc:	a8 dd       	rcall	.-1200   	; 0xa0e <udc_iface_enable>
     ebe:	88 23       	and	r24, r24
     ec0:	b9 f0       	breq	.+46     	; 0xef0 <udc_process_setup+0x348>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     ec2:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ec4:	e0 91 c1 21 	lds	r30, 0x21C1
     ec8:	f0 91 c2 21 	lds	r31, 0x21C2
     ecc:	01 90       	ld	r0, Z+
     ece:	f0 81       	ld	r31, Z
     ed0:	e0 2d       	mov	r30, r0
     ed2:	84 81       	ldd	r24, Z+4	; 0x04
     ed4:	c8 17       	cp	r28, r24
     ed6:	80 f3       	brcs	.-32     	; 0xeb8 <udc_process_setup+0x310>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	67 c0       	rjmp	.+206    	; 0xfaa <udc_process_setup+0x402>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	65 c0       	rjmp	.+202    	; 0xfaa <udc_process_setup+0x402>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	63 c0       	rjmp	.+198    	; 0xfaa <udc_process_setup+0x402>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	61 c0       	rjmp	.+194    	; 0xfaa <udc_process_setup+0x402>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	5f c0       	rjmp	.+190    	; 0xfaa <udc_process_setup+0x402>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	5d c0       	rjmp	.+186    	; 0xfaa <udc_process_setup+0x402>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	5b c0       	rjmp	.+182    	; 0xfaa <udc_process_setup+0x402>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     ef4:	21 30       	cpi	r18, 0x01	; 1
     ef6:	01 f5       	brne	.+64     	; 0xf38 <udc_process_setup+0x390>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     ef8:	80 91 fc 22 	lds	r24, 0x22FC
     efc:	8b 30       	cpi	r24, 0x0B	; 11
     efe:	e1 f4       	brne	.+56     	; 0xf38 <udc_process_setup+0x390>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     f00:	80 91 01 23 	lds	r24, 0x2301
     f04:	90 91 02 23 	lds	r25, 0x2302
     f08:	89 2b       	or	r24, r25
     f0a:	81 f4       	brne	.+32     	; 0xf2c <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f0c:	80 91 c0 21 	lds	r24, 0x21C0
     f10:	88 23       	and	r24, r24
     f12:	71 f0       	breq	.+28     	; 0xf30 <udc_process_setup+0x388>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f14:	c0 91 ff 22 	lds	r28, 0x22FF
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     f18:	d0 91 fd 22 	lds	r29, 0x22FD

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     f1c:	8c 2f       	mov	r24, r28
     f1e:	ab dd       	rcall	.-1194   	; 0xa76 <udc_iface_disable>
     f20:	88 23       	and	r24, r24
     f22:	41 f0       	breq	.+16     	; 0xf34 <udc_process_setup+0x38c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     f24:	6d 2f       	mov	r22, r29
     f26:	8c 2f       	mov	r24, r28
     f28:	72 dd       	rcall	.-1308   	; 0xa0e <udc_iface_enable>
     f2a:	3f c0       	rjmp	.+126    	; 0xfaa <udc_process_setup+0x402>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	3d c0       	rjmp	.+122    	; 0xfaa <udc_process_setup+0x402>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	3b c0       	rjmp	.+118    	; 0xfaa <udc_process_setup+0x402>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	39 c0       	rjmp	.+114    	; 0xfaa <udc_process_setup+0x402>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	c9 f5       	brne	.+114    	; 0xfae <udc_process_setup+0x406>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     f3c:	80 91 fc 22 	lds	r24, 0x22FC
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	19 f0       	breq	.+6      	; 0xf4a <udc_process_setup+0x3a2>
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	81 f5       	brne	.+96     	; 0xfa8 <udc_process_setup+0x400>
     f48:	14 c0       	rjmp	.+40     	; 0xf72 <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     f4a:	80 91 01 23 	lds	r24, 0x2301
     f4e:	90 91 02 23 	lds	r25, 0x2302
     f52:	89 2b       	or	r24, r25
     f54:	51 f4       	brne	.+20     	; 0xf6a <udc_process_setup+0x3c2>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f56:	80 91 fd 22 	lds	r24, 0x22FD
     f5a:	90 91 fe 22 	lds	r25, 0x22FE
     f5e:	89 2b       	or	r24, r25
     f60:	31 f4       	brne	.+12     	; 0xf6e <udc_process_setup+0x3c6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f62:	80 91 ff 22 	lds	r24, 0x22FF
     f66:	b3 d4       	rcall	.+2406   	; 0x18ce <udd_ep_clear_halt>
     f68:	20 c0       	rjmp	.+64     	; 0xfaa <udc_process_setup+0x402>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	1e c0       	rjmp	.+60     	; 0xfaa <udc_process_setup+0x402>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	1c c0       	rjmp	.+56     	; 0xfaa <udc_process_setup+0x402>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     f72:	80 91 01 23 	lds	r24, 0x2301
     f76:	90 91 02 23 	lds	r25, 0x2302
     f7a:	89 2b       	or	r24, r25
     f7c:	69 f4       	brne	.+26     	; 0xf98 <udc_process_setup+0x3f0>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     f7e:	80 91 fd 22 	lds	r24, 0x22FD
     f82:	90 91 fe 22 	lds	r25, 0x22FE
     f86:	89 2b       	or	r24, r25
     f88:	49 f4       	brne	.+18     	; 0xf9c <udc_process_setup+0x3f4>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     f8a:	cf ef       	ldi	r28, 0xFF	; 255
     f8c:	d2 e2       	ldi	r29, 0x22	; 34
     f8e:	88 81       	ld	r24, Y
     f90:	2d d5       	rcall	.+2650   	; 0x19ec <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     f92:	88 81       	ld	r24, Y
     f94:	53 d5       	rcall	.+2726   	; 0x1a3c <udd_ep_set_halt>
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <udc_process_setup+0x402>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <udc_process_setup+0x402>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <udc_process_setup+0x402>
				break;
			}
		}
#endif
	}
	return false;
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <udc_process_setup+0x402>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <udc_process_setup+0x402>
				break;
			}
		}
#endif
	}
	return false;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     faa:	81 11       	cpse	r24, r1
     fac:	77 c0       	rjmp	.+238    	; 0x109c <udc_process_setup+0x4f4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     fae:	80 91 fb 22 	lds	r24, 0x22FB
     fb2:	8f 71       	andi	r24, 0x1F	; 31
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	71 f5       	brne	.+92     	; 0x1014 <udc_process_setup+0x46c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     fb8:	80 91 c0 21 	lds	r24, 0x21C0
     fbc:	88 23       	and	r24, r24
     fbe:	51 f1       	breq	.+84     	; 0x1014 <udc_process_setup+0x46c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     fc0:	00 91 ff 22 	lds	r16, 0x22FF
     fc4:	10 91 00 23 	lds	r17, 0x2300
     fc8:	f0 2e       	mov	r15, r16
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     fca:	c0 91 c1 21 	lds	r28, 0x21C1
     fce:	d0 91 c2 21 	lds	r29, 0x21C2
     fd2:	e8 81       	ld	r30, Y
     fd4:	f9 81       	ldd	r31, Y+1	; 0x01
     fd6:	84 81       	ldd	r24, Z+4	; 0x04
     fd8:	08 17       	cp	r16, r24
     fda:	e0 f4       	brcc	.+56     	; 0x1014 <udc_process_setup+0x46c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	80 2f       	mov	r24, r16
     fe0:	d1 dc       	rcall	.-1630   	; 0x984 <udc_update_iface_desc>
     fe2:	88 23       	and	r24, r24
     fe4:	b9 f0       	breq	.+46     	; 0x1014 <udc_process_setup+0x46c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     fe6:	11 27       	eor	r17, r17
     fe8:	98 01       	movw	r18, r16
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	ea 81       	ldd	r30, Y+2	; 0x02
     ff0:	fb 81       	ldd	r31, Y+3	; 0x03
     ff2:	e2 0f       	add	r30, r18
     ff4:	f3 1f       	adc	r31, r19
     ff6:	c0 81       	ld	r28, Z
     ff8:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     ffa:	ee 81       	ldd	r30, Y+6	; 0x06
     ffc:	ff 81       	ldd	r31, Y+7	; 0x07
     ffe:	09 95       	icall
    1000:	68 2f       	mov	r22, r24
    1002:	8f 2d       	mov	r24, r15
    1004:	bf dc       	rcall	.-1666   	; 0x984 <udc_update_iface_desc>
    1006:	88 23       	and	r24, r24
    1008:	29 f0       	breq	.+10     	; 0x1014 <udc_process_setup+0x46c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    100a:	ec 81       	ldd	r30, Y+4	; 0x04
    100c:	fd 81       	ldd	r31, Y+5	; 0x05
    100e:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1010:	81 11       	cpse	r24, r1
    1012:	46 c0       	rjmp	.+140    	; 0x10a0 <udc_process_setup+0x4f8>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1014:	80 91 fb 22 	lds	r24, 0x22FB
    1018:	8f 71       	andi	r24, 0x1F	; 31
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	09 f0       	breq	.+2      	; 0x1020 <udc_process_setup+0x478>
    101e:	42 c0       	rjmp	.+132    	; 0x10a4 <udc_process_setup+0x4fc>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1020:	80 91 c0 21 	lds	r24, 0x21C0
    1024:	88 23       	and	r24, r24
    1026:	81 f1       	breq	.+96     	; 0x1088 <udc_process_setup+0x4e0>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1028:	e0 91 c1 21 	lds	r30, 0x21C1
    102c:	f0 91 c2 21 	lds	r31, 0x21C2
    1030:	a0 81       	ld	r26, Z
    1032:	b1 81       	ldd	r27, Z+1	; 0x01
    1034:	14 96       	adiw	r26, 0x04	; 4
    1036:	8c 91       	ld	r24, X
    1038:	88 23       	and	r24, r24
    103a:	41 f1       	breq	.+80     	; 0x108c <udc_process_setup+0x4e4>
    103c:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    103e:	21 2f       	mov	r18, r17
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	22 0f       	add	r18, r18
    1044:	33 1f       	adc	r19, r19
    1046:	02 80       	ldd	r0, Z+2	; 0x02
    1048:	f3 81       	ldd	r31, Z+3	; 0x03
    104a:	e0 2d       	mov	r30, r0
    104c:	e2 0f       	add	r30, r18
    104e:	f3 1f       	adc	r31, r19
    1050:	c0 81       	ld	r28, Z
    1052:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1054:	ee 81       	ldd	r30, Y+6	; 0x06
    1056:	ff 81       	ldd	r31, Y+7	; 0x07
    1058:	09 95       	icall
    105a:	68 2f       	mov	r22, r24
    105c:	81 2f       	mov	r24, r17
    105e:	92 dc       	rcall	.-1756   	; 0x984 <udc_update_iface_desc>
    1060:	88 23       	and	r24, r24
    1062:	b1 f0       	breq	.+44     	; 0x1090 <udc_process_setup+0x4e8>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1064:	ec 81       	ldd	r30, Y+4	; 0x04
    1066:	fd 81       	ldd	r31, Y+5	; 0x05
    1068:	09 95       	icall
    106a:	81 11       	cpse	r24, r1
    106c:	13 c0       	rjmp	.+38     	; 0x1094 <udc_process_setup+0x4ec>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    106e:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1070:	e0 91 c1 21 	lds	r30, 0x21C1
    1074:	f0 91 c2 21 	lds	r31, 0x21C2
    1078:	a0 81       	ld	r26, Z
    107a:	b1 81       	ldd	r27, Z+1	; 0x01
    107c:	14 96       	adiw	r26, 0x04	; 4
    107e:	8c 91       	ld	r24, X
    1080:	18 17       	cp	r17, r24
    1082:	e8 f2       	brcs	.-70     	; 0x103e <udc_process_setup+0x496>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	1a c0       	rjmp	.+52     	; 0x10bc <udc_process_setup+0x514>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	18 c0       	rjmp	.+48     	; 0x10bc <udc_process_setup+0x514>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	16 c0       	rjmp	.+44     	; 0x10bc <udc_process_setup+0x514>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <udc_process_setup+0x514>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <udc_process_setup+0x514>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	10 c0       	rjmp	.+32     	; 0x10bc <udc_process_setup+0x514>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	0e c0       	rjmp	.+28     	; 0x10bc <udc_process_setup+0x514>
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0c c0       	rjmp	.+24     	; 0x10bc <udc_process_setup+0x514>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	0a c0       	rjmp	.+20     	; 0x10bc <udc_process_setup+0x514>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    10a8:	82 2f       	mov	r24, r18
    10aa:	80 76       	andi	r24, 0x60	; 96
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <udc_process_setup+0x508>
    10ae:	7f cf       	rjmp	.-258    	; 0xfae <udc_process_setup+0x406>
    10b0:	8c ce       	rjmp	.-744    	; 0xdca <udc_process_setup+0x222>
    10b2:	32 2f       	mov	r19, r18
    10b4:	30 76       	andi	r19, 0x60	; 96
    10b6:	09 f0       	breq	.+2      	; 0x10ba <udc_process_setup+0x512>
    10b8:	7a cf       	rjmp	.-268    	; 0xfae <udc_process_setup+0x406>
    10ba:	94 cd       	rjmp	.-1240   	; 0xbe4 <udc_process_setup+0x3c>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	08 95       	ret

000010c8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    10c8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    10ca:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    10cc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    10ce:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    10d0:	60 83       	st	Z, r22
	ret                             // Return to caller
    10d2:	08 95       	ret

000010d4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    10d4:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    10d8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    10da:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    10dc:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    10e0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    10e2:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    10e6:	08 95       	ret

000010e8 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    10e8:	81 11       	cpse	r24, r1
    10ea:	18 c0       	rjmp	.+48     	; 0x111c <udd_sleep_mode+0x34>
    10ec:	90 91 2c 22 	lds	r25, 0x222C
    10f0:	99 23       	and	r25, r25
    10f2:	89 f0       	breq	.+34     	; 0x1116 <udd_sleep_mode+0x2e>
    10f4:	9f b7       	in	r25, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	e6 ef       	ldi	r30, 0xF6	; 246
    10fa:	f2 e2       	ldi	r31, 0x22	; 34
    10fc:	20 81       	ld	r18, Z
    10fe:	21 50       	subi	r18, 0x01	; 1
    1100:	20 83       	st	Z, r18
    1102:	9f bf       	out	0x3f, r25	; 63
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <udd_sleep_mode+0x2e>
    1106:	9f b7       	in	r25, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	e6 ef       	ldi	r30, 0xF6	; 246
    110c:	f2 e2       	ldi	r31, 0x22	; 34
    110e:	20 81       	ld	r18, Z
    1110:	2f 5f       	subi	r18, 0xFF	; 255
    1112:	20 83       	st	Z, r18
    1114:	9f bf       	out	0x3f, r25	; 63
    1116:	80 93 2c 22 	sts	0x222C, r24
    111a:	08 95       	ret
    111c:	90 91 2c 22 	lds	r25, 0x222C
    1120:	99 23       	and	r25, r25
    1122:	89 f3       	breq	.-30     	; 0x1106 <udd_sleep_mode+0x1e>
    1124:	f8 cf       	rjmp	.-16     	; 0x1116 <udd_sleep_mode+0x2e>

00001126 <udd_ep_get_ctrl>:
    1126:	28 2f       	mov	r18, r24
    1128:	2f 70       	andi	r18, 0x0F	; 15
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	22 0f       	add	r18, r18
    112e:	33 1f       	adc	r19, r19
    1130:	99 27       	eor	r25, r25
    1132:	87 fd       	sbrc	r24, 7
    1134:	90 95       	com	r25
    1136:	88 27       	eor	r24, r24
    1138:	99 0f       	add	r25, r25
    113a:	88 1f       	adc	r24, r24
    113c:	99 27       	eor	r25, r25
    113e:	28 0f       	add	r18, r24
    1140:	39 1f       	adc	r19, r25
    1142:	22 0f       	add	r18, r18
    1144:	33 1f       	adc	r19, r19
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	2c 52       	subi	r18, 0x2C	; 44
    1150:	3e 4d       	sbci	r19, 0xDE	; 222
    1152:	82 2f       	mov	r24, r18
    1154:	93 2f       	mov	r25, r19
    1156:	08 95       	ret

00001158 <udd_ep_init>:
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	63 70       	andi	r22, 0x03	; 3
    1162:	61 30       	cpi	r22, 0x01	; 1
    1164:	39 f0       	breq	.+14     	; 0x1174 <udd_ep_init+0x1c>
    1166:	18 f4       	brcc	.+6      	; 0x116e <udd_ep_init+0x16>
    1168:	c0 e4       	ldi	r28, 0x40	; 64
    116a:	d0 e0       	ldi	r29, 0x00	; 0
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <udd_ep_init+0x20>
    116e:	c0 e8       	ldi	r28, 0x80	; 128
    1170:	d0 e0       	ldi	r29, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <udd_ep_init+0x20>
    1174:	c0 ec       	ldi	r28, 0xC0	; 192
    1176:	d0 e0       	ldi	r29, 0x00	; 0
    1178:	40 38       	cpi	r20, 0x80	; 128
    117a:	51 05       	cpc	r21, r1
    117c:	f9 f0       	breq	.+62     	; 0x11bc <udd_ep_init+0x64>
    117e:	50 f4       	brcc	.+20     	; 0x1194 <udd_ep_init+0x3c>
    1180:	40 32       	cpi	r20, 0x20	; 32
    1182:	51 05       	cpc	r21, r1
    1184:	a9 f0       	breq	.+42     	; 0x11b0 <udd_ep_init+0x58>
    1186:	40 34       	cpi	r20, 0x40	; 64
    1188:	51 05       	cpc	r21, r1
    118a:	a9 f0       	breq	.+42     	; 0x11b6 <udd_ep_init+0x5e>
    118c:	40 31       	cpi	r20, 0x10	; 16
    118e:	51 05       	cpc	r21, r1
    1190:	61 f4       	brne	.+24     	; 0x11aa <udd_ep_init+0x52>
    1192:	20 c0       	rjmp	.+64     	; 0x11d4 <udd_ep_init+0x7c>
    1194:	41 15       	cp	r20, r1
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	59 07       	cpc	r21, r25
    119a:	b1 f0       	breq	.+44     	; 0x11c8 <udd_ep_init+0x70>
    119c:	4f 3f       	cpi	r20, 0xFF	; 255
    119e:	93 e0       	ldi	r25, 0x03	; 3
    11a0:	59 07       	cpc	r21, r25
    11a2:	a9 f0       	breq	.+42     	; 0x11ce <udd_ep_init+0x76>
    11a4:	41 15       	cp	r20, r1
    11a6:	51 40       	sbci	r21, 0x01	; 1
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <udd_ep_init+0x6a>
    11aa:	00 e0       	ldi	r16, 0x00	; 0
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	14 c0       	rjmp	.+40     	; 0x11d8 <udd_ep_init+0x80>
    11b0:	02 e0       	ldi	r16, 0x02	; 2
    11b2:	10 e0       	ldi	r17, 0x00	; 0
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <udd_ep_init+0x80>
    11b6:	03 e0       	ldi	r16, 0x03	; 3
    11b8:	10 e0       	ldi	r17, 0x00	; 0
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <udd_ep_init+0x80>
    11bc:	04 e0       	ldi	r16, 0x04	; 4
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	0b c0       	rjmp	.+22     	; 0x11d8 <udd_ep_init+0x80>
    11c2:	05 e0       	ldi	r16, 0x05	; 5
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <udd_ep_init+0x80>
    11c8:	06 e0       	ldi	r16, 0x06	; 6
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <udd_ep_init+0x80>
    11ce:	07 e0       	ldi	r16, 0x07	; 7
    11d0:	10 e0       	ldi	r17, 0x00	; 0
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <udd_ep_init+0x80>
    11d4:	01 e0       	ldi	r16, 0x01	; 1
    11d6:	10 e0       	ldi	r17, 0x00	; 0
    11d8:	a6 df       	rcall	.-180    	; 0x1126 <udd_ep_get_ctrl>
    11da:	fc 01       	movw	r30, r24
    11dc:	11 82       	std	Z+1, r1	; 0x01
    11de:	86 e0       	ldi	r24, 0x06	; 6
    11e0:	80 83       	st	Z, r24
    11e2:	c0 2b       	or	r28, r16
    11e4:	c1 83       	std	Z+1, r28	; 0x01
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <udd_ctrl_init>:
    11f0:	0f 93       	push	r16
    11f2:	e8 ec       	ldi	r30, 0xC8	; 200
    11f4:	f4 e0       	ldi	r31, 0x04	; 4
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 7d       	andi	r24, 0xDF	; 223
    11fa:	80 83       	st	Z, r24
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 7d       	andi	r24, 0xDF	; 223
    1200:	80 83       	st	Z, r24
    1202:	ec ed       	ldi	r30, 0xDC	; 220
    1204:	f1 e2       	ldi	r31, 0x21	; 33
    1206:	02 e0       	ldi	r16, 0x02	; 2
    1208:	05 93       	las	Z, r16
    120a:	10 92 de 21 	sts	0x21DE, r1
    120e:	10 92 df 21 	sts	0x21DF, r1
    1212:	00 e2       	ldi	r16, 0x20	; 32
    1214:	06 93       	lac	Z, r16
    1216:	00 e4       	ldi	r16, 0x40	; 64
    1218:	06 93       	lac	Z, r16
    121a:	e4 ed       	ldi	r30, 0xD4	; 212
    121c:	f1 e2       	ldi	r31, 0x21	; 33
    121e:	00 e2       	ldi	r16, 0x20	; 32
    1220:	06 93       	lac	Z, r16
    1222:	00 e4       	ldi	r16, 0x40	; 64
    1224:	06 93       	lac	Z, r16
    1226:	10 92 07 23 	sts	0x2307, r1
    122a:	10 92 08 23 	sts	0x2308, r1
    122e:	10 92 09 23 	sts	0x2309, r1
    1232:	10 92 0a 23 	sts	0x230A, r1
    1236:	10 92 05 23 	sts	0x2305, r1
    123a:	10 92 06 23 	sts	0x2306, r1
    123e:	10 92 ed 22 	sts	0x22ED, r1
    1242:	10 92 ee 22 	sts	0x22EE, r1
    1246:	0f 91       	pop	r16
    1248:	08 95       	ret

0000124a <udd_ctrl_stall_data>:
    124a:	0f 93       	push	r16
    124c:	85 e0       	ldi	r24, 0x05	; 5
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	80 93 ed 22 	sts	0x22ED, r24
    1254:	90 93 ee 22 	sts	0x22EE, r25
    1258:	ed ed       	ldi	r30, 0xDD	; 221
    125a:	f1 e2       	ldi	r31, 0x21	; 33
    125c:	04 e0       	ldi	r16, 0x04	; 4
    125e:	05 93       	las	Z, r16
    1260:	e5 ed       	ldi	r30, 0xD5	; 213
    1262:	f1 e2       	ldi	r31, 0x21	; 33
    1264:	04 e0       	ldi	r16, 0x04	; 4
    1266:	05 93       	las	Z, r16
    1268:	0f 91       	pop	r16
    126a:	08 95       	ret

0000126c <udd_ctrl_send_zlp_in>:
    126c:	0f 93       	push	r16
    126e:	83 e0       	ldi	r24, 0x03	; 3
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	80 93 ed 22 	sts	0x22ED, r24
    1276:	90 93 ee 22 	sts	0x22EE, r25
    127a:	10 92 de 21 	sts	0x21DE, r1
    127e:	10 92 df 21 	sts	0x21DF, r1
    1282:	ec ed       	ldi	r30, 0xDC	; 220
    1284:	f1 e2       	ldi	r31, 0x21	; 33
    1286:	02 e0       	ldi	r16, 0x02	; 2
    1288:	06 93       	lac	Z, r16
    128a:	0f 91       	pop	r16
    128c:	08 95       	ret

0000128e <udd_ctrl_send_zlp_out>:
    128e:	0f 93       	push	r16
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	80 93 ed 22 	sts	0x22ED, r24
    1298:	90 93 ee 22 	sts	0x22EE, r25
    129c:	e4 ed       	ldi	r30, 0xD4	; 212
    129e:	f1 e2       	ldi	r31, 0x21	; 33
    12a0:	02 e0       	ldi	r16, 0x02	; 2
    12a2:	06 93       	lac	Z, r16
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <udd_ctrl_endofrequest>:
    12a8:	e0 91 07 23 	lds	r30, 0x2307
    12ac:	f0 91 08 23 	lds	r31, 0x2308
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <udd_ctrl_endofrequest+0xe>
    12b4:	09 95       	icall
    12b6:	08 95       	ret

000012b8 <udd_ctrl_in_sent>:
    12b8:	0f 93       	push	r16
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	80 91 ed 22 	lds	r24, 0x22ED
    12c2:	90 91 ee 22 	lds	r25, 0x22EE
    12c6:	03 97       	sbiw	r24, 0x03	; 3
    12c8:	19 f4       	brne	.+6      	; 0x12d0 <udd_ctrl_in_sent+0x18>
    12ca:	ee df       	rcall	.-36     	; 0x12a8 <udd_ctrl_endofrequest>
    12cc:	91 df       	rcall	.-222    	; 0x11f0 <udd_ctrl_init>
    12ce:	5a c0       	rjmp	.+180    	; 0x1384 <udd_ctrl_in_sent+0xcc>
    12d0:	80 91 f1 22 	lds	r24, 0x22F1
    12d4:	90 91 f2 22 	lds	r25, 0x22F2
    12d8:	c0 91 05 23 	lds	r28, 0x2305
    12dc:	d0 91 06 23 	lds	r29, 0x2306
    12e0:	c8 1b       	sub	r28, r24
    12e2:	d9 0b       	sbc	r29, r25
    12e4:	41 f5       	brne	.+80     	; 0x1336 <udd_ctrl_in_sent+0x7e>
    12e6:	20 91 ef 22 	lds	r18, 0x22EF
    12ea:	30 91 f0 22 	lds	r19, 0x22F0
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	80 93 ef 22 	sts	0x22EF, r24
    12f6:	90 93 f0 22 	sts	0x22F0, r25
    12fa:	20 91 01 23 	lds	r18, 0x2301
    12fe:	30 91 02 23 	lds	r19, 0x2302
    1302:	82 17       	cp	r24, r18
    1304:	93 07       	cpc	r25, r19
    1306:	21 f0       	breq	.+8      	; 0x1310 <udd_ctrl_in_sent+0x58>
    1308:	80 91 f3 22 	lds	r24, 0x22F3
    130c:	88 23       	and	r24, r24
    130e:	11 f0       	breq	.+4      	; 0x1314 <udd_ctrl_in_sent+0x5c>
    1310:	be df       	rcall	.-132    	; 0x128e <udd_ctrl_send_zlp_out>
    1312:	38 c0       	rjmp	.+112    	; 0x1384 <udd_ctrl_in_sent+0xcc>
    1314:	e0 91 09 23 	lds	r30, 0x2309
    1318:	f0 91 0a 23 	lds	r31, 0x230A
    131c:	30 97       	sbiw	r30, 0x00	; 0
    131e:	99 f0       	breq	.+38     	; 0x1346 <udd_ctrl_in_sent+0x8e>
    1320:	09 95       	icall
    1322:	88 23       	and	r24, r24
    1324:	81 f0       	breq	.+32     	; 0x1346 <udd_ctrl_in_sent+0x8e>
    1326:	10 92 f1 22 	sts	0x22F1, r1
    132a:	10 92 f2 22 	sts	0x22F2, r1
    132e:	c0 91 05 23 	lds	r28, 0x2305
    1332:	d0 91 06 23 	lds	r29, 0x2306
    1336:	c0 34       	cpi	r28, 0x40	; 64
    1338:	d1 05       	cpc	r29, r1
    133a:	28 f0       	brcs	.+10     	; 0x1346 <udd_ctrl_in_sent+0x8e>
    133c:	10 92 f3 22 	sts	0x22F3, r1
    1340:	c0 e4       	ldi	r28, 0x40	; 64
    1342:	d0 e0       	ldi	r29, 0x00	; 0
    1344:	03 c0       	rjmp	.+6      	; 0x134c <udd_ctrl_in_sent+0x94>
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 f3 22 	sts	0x22F3, r24
    134c:	c0 93 de 21 	sts	0x21DE, r28
    1350:	d0 93 df 21 	sts	0x21DF, r29
    1354:	80 91 f1 22 	lds	r24, 0x22F1
    1358:	90 91 f2 22 	lds	r25, 0x22F2
    135c:	20 91 03 23 	lds	r18, 0x2303
    1360:	30 91 04 23 	lds	r19, 0x2304
    1364:	28 0f       	add	r18, r24
    1366:	39 1f       	adc	r19, r25
    1368:	20 93 e0 21 	sts	0x21E0, r18
    136c:	30 93 e1 21 	sts	0x21E1, r19
    1370:	c8 0f       	add	r28, r24
    1372:	d9 1f       	adc	r29, r25
    1374:	c0 93 f1 22 	sts	0x22F1, r28
    1378:	d0 93 f2 22 	sts	0x22F2, r29
    137c:	ec ed       	ldi	r30, 0xDC	; 220
    137e:	f1 e2       	ldi	r31, 0x21	; 33
    1380:	02 e0       	ldi	r16, 0x02	; 2
    1382:	06 93       	lac	Z, r16
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	0f 91       	pop	r16
    138a:	08 95       	ret

0000138c <udd_ep_get_size>:
    138c:	fc 01       	movw	r30, r24
    138e:	81 81       	ldd	r24, Z+1	; 0x01
    1390:	87 70       	andi	r24, 0x07	; 7
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	a9 f0       	breq	.+42     	; 0x13c0 <udd_ep_get_size+0x34>
    1396:	30 f4       	brcc	.+12     	; 0x13a4 <udd_ep_get_size+0x18>
    1398:	82 30       	cpi	r24, 0x02	; 2
    139a:	61 f0       	breq	.+24     	; 0x13b4 <udd_ep_get_size+0x28>
    139c:	70 f4       	brcc	.+28     	; 0x13ba <udd_ep_get_size+0x2e>
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	31 f4       	brne	.+12     	; 0x13ae <udd_ep_get_size+0x22>
    13a2:	1a c0       	rjmp	.+52     	; 0x13d8 <udd_ep_get_size+0x4c>
    13a4:	86 30       	cpi	r24, 0x06	; 6
    13a6:	91 f0       	breq	.+36     	; 0x13cc <udd_ep_get_size+0x40>
    13a8:	70 f0       	brcs	.+28     	; 0x13c6 <udd_ep_get_size+0x3a>
    13aa:	87 30       	cpi	r24, 0x07	; 7
    13ac:	91 f0       	breq	.+36     	; 0x13d2 <udd_ep_get_size+0x46>
    13ae:	28 e0       	ldi	r18, 0x08	; 8
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	14 c0       	rjmp	.+40     	; 0x13dc <udd_ep_get_size+0x50>
    13b4:	20 e2       	ldi	r18, 0x20	; 32
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	11 c0       	rjmp	.+34     	; 0x13dc <udd_ep_get_size+0x50>
    13ba:	20 e4       	ldi	r18, 0x40	; 64
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <udd_ep_get_size+0x50>
    13c0:	20 e8       	ldi	r18, 0x80	; 128
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	0b c0       	rjmp	.+22     	; 0x13dc <udd_ep_get_size+0x50>
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	31 e0       	ldi	r19, 0x01	; 1
    13ca:	08 c0       	rjmp	.+16     	; 0x13dc <udd_ep_get_size+0x50>
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	32 e0       	ldi	r19, 0x02	; 2
    13d0:	05 c0       	rjmp	.+10     	; 0x13dc <udd_ep_get_size+0x50>
    13d2:	2f ef       	ldi	r18, 0xFF	; 255
    13d4:	33 e0       	ldi	r19, 0x03	; 3
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <udd_ep_get_size+0x50>
    13d8:	20 e1       	ldi	r18, 0x10	; 16
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	82 2f       	mov	r24, r18
    13de:	93 2f       	mov	r25, r19
    13e0:	08 95       	ret

000013e2 <udd_ep_get_job>:
    13e2:	28 2f       	mov	r18, r24
    13e4:	2f 70       	andi	r18, 0x0F	; 15
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	22 0f       	add	r18, r18
    13ea:	33 1f       	adc	r19, r19
    13ec:	99 27       	eor	r25, r25
    13ee:	87 fd       	sbrc	r24, 7
    13f0:	90 95       	com	r25
    13f2:	88 27       	eor	r24, r24
    13f4:	99 0f       	add	r25, r25
    13f6:	88 1f       	adc	r24, r24
    13f8:	99 27       	eor	r25, r25
    13fa:	28 0f       	add	r18, r24
    13fc:	39 1f       	adc	r19, r25
    13fe:	22 50       	subi	r18, 0x02	; 2
    1400:	31 09       	sbc	r19, r1
    1402:	c9 01       	movw	r24, r18
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	28 0f       	add	r18, r24
    1412:	39 1f       	adc	r19, r25
    1414:	28 5f       	subi	r18, 0xF8	; 248
    1416:	3d 4d       	sbci	r19, 0xDD	; 221
    1418:	82 2f       	mov	r24, r18
    141a:	93 2f       	mov	r25, r19
    141c:	08 95       	ret

0000141e <udd_ctrl_interrupt_tc_setup>:
    141e:	0f 93       	push	r16
    1420:	80 91 cc 04 	lds	r24, 0x04CC
    1424:	80 ff       	sbrs	r24, 0
    1426:	6c c0       	rjmp	.+216    	; 0x1500 <udd_ctrl_interrupt_tc_setup+0xe2>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	80 93 cc 04 	sts	0x04CC, r24
    142e:	e4 ed       	ldi	r30, 0xD4	; 212
    1430:	f1 e2       	ldi	r31, 0x21	; 33
    1432:	00 e8       	ldi	r16, 0x80	; 128
    1434:	06 93       	lac	Z, r16
    1436:	ec ed       	ldi	r30, 0xDC	; 220
    1438:	f1 e2       	ldi	r31, 0x21	; 33
    143a:	00 e8       	ldi	r16, 0x80	; 128
    143c:	06 93       	lac	Z, r16
    143e:	80 93 ca 04 	sts	0x04CA, r24
    1442:	e4 ed       	ldi	r30, 0xD4	; 212
    1444:	f1 e2       	ldi	r31, 0x21	; 33
    1446:	00 e1       	ldi	r16, 0x10	; 16
    1448:	06 93       	lac	Z, r16
    144a:	80 91 ed 22 	lds	r24, 0x22ED
    144e:	90 91 ee 22 	lds	r25, 0x22EE
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	29 f0       	breq	.+10     	; 0x1460 <udd_ctrl_interrupt_tc_setup+0x42>
    1456:	03 97       	sbiw	r24, 0x03	; 3
    1458:	02 97       	sbiw	r24, 0x02	; 2
    145a:	08 f4       	brcc	.+2      	; 0x145e <udd_ctrl_interrupt_tc_setup+0x40>
    145c:	25 df       	rcall	.-438    	; 0x12a8 <udd_ctrl_endofrequest>
    145e:	c8 de       	rcall	.-624    	; 0x11f0 <udd_ctrl_init>
    1460:	80 91 d6 21 	lds	r24, 0x21D6
    1464:	90 91 d7 21 	lds	r25, 0x21D7
    1468:	08 97       	sbiw	r24, 0x08	; 8
    146a:	09 f0       	breq	.+2      	; 0x146e <udd_ctrl_interrupt_tc_setup+0x50>
    146c:	4b c0       	rjmp	.+150    	; 0x1504 <udd_ctrl_interrupt_tc_setup+0xe6>
    146e:	88 e0       	ldi	r24, 0x08	; 8
    1470:	ed ea       	ldi	r30, 0xAD	; 173
    1472:	f2 e2       	ldi	r31, 0x22	; 34
    1474:	ab ef       	ldi	r26, 0xFB	; 251
    1476:	b2 e2       	ldi	r27, 0x22	; 34
    1478:	01 90       	ld	r0, Z+
    147a:	0d 92       	st	X+, r0
    147c:	8a 95       	dec	r24
    147e:	e1 f7       	brne	.-8      	; 0x1478 <udd_ctrl_interrupt_tc_setup+0x5a>
    1480:	e8 ec       	ldi	r30, 0xC8	; 200
    1482:	f4 e0       	ldi	r31, 0x04	; 4
    1484:	80 81       	ld	r24, Z
    1486:	80 62       	ori	r24, 0x20	; 32
    1488:	80 83       	st	Z, r24
    148a:	80 81       	ld	r24, Z
    148c:	80 62       	ori	r24, 0x20	; 32
    148e:	80 83       	st	Z, r24
    1490:	8b db       	rcall	.-2282   	; 0xba8 <udc_process_setup>
    1492:	81 11       	cpse	r24, r1
    1494:	03 c0       	rjmp	.+6      	; 0x149c <udd_ctrl_interrupt_tc_setup+0x7e>
    1496:	d9 de       	rcall	.-590    	; 0x124a <udd_ctrl_stall_data>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	35 c0       	rjmp	.+106    	; 0x1506 <udd_ctrl_interrupt_tc_setup+0xe8>
    149c:	80 91 fb 22 	lds	r24, 0x22FB
    14a0:	88 23       	and	r24, r24
    14a2:	8c f4       	brge	.+34     	; 0x14c6 <udd_ctrl_interrupt_tc_setup+0xa8>
    14a4:	10 92 ef 22 	sts	0x22EF, r1
    14a8:	10 92 f0 22 	sts	0x22F0, r1
    14ac:	10 92 f1 22 	sts	0x22F1, r1
    14b0:	10 92 f2 22 	sts	0x22F2, r1
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	80 93 ed 22 	sts	0x22ED, r24
    14bc:	90 93 ee 22 	sts	0x22EE, r25
    14c0:	fb de       	rcall	.-522    	; 0x12b8 <udd_ctrl_in_sent>
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	20 c0       	rjmp	.+64     	; 0x1506 <udd_ctrl_interrupt_tc_setup+0xe8>
    14c6:	80 91 01 23 	lds	r24, 0x2301
    14ca:	90 91 02 23 	lds	r25, 0x2302
    14ce:	89 2b       	or	r24, r25
    14d0:	19 f4       	brne	.+6      	; 0x14d8 <udd_ctrl_interrupt_tc_setup+0xba>
    14d2:	cc de       	rcall	.-616    	; 0x126c <udd_ctrl_send_zlp_in>
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	17 c0       	rjmp	.+46     	; 0x1506 <udd_ctrl_interrupt_tc_setup+0xe8>
    14d8:	10 92 ef 22 	sts	0x22EF, r1
    14dc:	10 92 f0 22 	sts	0x22F0, r1
    14e0:	10 92 f1 22 	sts	0x22F1, r1
    14e4:	10 92 f2 22 	sts	0x22F2, r1
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	80 93 ed 22 	sts	0x22ED, r24
    14f0:	90 93 ee 22 	sts	0x22EE, r25
    14f4:	e4 ed       	ldi	r30, 0xD4	; 212
    14f6:	f1 e2       	ldi	r31, 0x21	; 33
    14f8:	02 e0       	ldi	r16, 0x02	; 2
    14fa:	06 93       	lac	Z, r16
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	03 c0       	rjmp	.+6      	; 0x1506 <udd_ctrl_interrupt_tc_setup+0xe8>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <udd_ctrl_interrupt_tc_setup+0xe8>
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <udd_ep_trans_complet>:
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	b8 2e       	mov	r11, r24
    151e:	61 df       	rcall	.-318    	; 0x13e2 <udd_ep_get_job>
    1520:	ec 01       	movw	r28, r24
    1522:	8b 2d       	mov	r24, r11
    1524:	00 de       	rcall	.-1024   	; 0x1126 <udd_ep_get_ctrl>
    1526:	7c 01       	movw	r14, r24
    1528:	31 df       	rcall	.-414    	; 0x138c <udd_ep_get_size>
    152a:	6c 01       	movw	r12, r24
    152c:	bb 20       	and	r11, r11
    152e:	0c f0       	brlt	.+2      	; 0x1532 <udd_ep_trans_complet+0x28>
    1530:	5d c0       	rjmp	.+186    	; 0x15ec <udd_ep_trans_complet+0xe2>
    1532:	d7 01       	movw	r26, r14
    1534:	16 96       	adiw	r26, 0x06	; 6
    1536:	2d 91       	ld	r18, X+
    1538:	3c 91       	ld	r19, X
    153a:	17 97       	sbiw	r26, 0x07	; 7
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	28 0f       	add	r18, r24
    1542:	39 1f       	adc	r19, r25
    1544:	2d 83       	std	Y+5, r18	; 0x05
    1546:	3e 83       	std	Y+6, r19	; 0x06
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	28 17       	cp	r18, r24
    154e:	39 07       	cpc	r19, r25
    1550:	09 f4       	brne	.+2      	; 0x1554 <udd_ep_trans_complet+0x4a>
    1552:	3a c0       	rjmp	.+116    	; 0x15c8 <udd_ep_trans_complet+0xbe>
    1554:	fc 01       	movw	r30, r24
    1556:	e2 1b       	sub	r30, r18
    1558:	f3 0b       	sbc	r31, r19
    155a:	9f 01       	movw	r18, r30
    155c:	21 15       	cp	r18, r1
    155e:	f4 e0       	ldi	r31, 0x04	; 4
    1560:	3f 07       	cpc	r19, r31
    1562:	38 f0       	brcs	.+14     	; 0x1572 <udd_ep_trans_complet+0x68>
    1564:	2f ef       	ldi	r18, 0xFF	; 255
    1566:	33 e0       	ldi	r19, 0x03	; 3
    1568:	c9 01       	movw	r24, r18
    156a:	b6 01       	movw	r22, r12
    156c:	4e d4       	rcall	.+2204   	; 0x1e0a <__udivmodhi4>
    156e:	28 1b       	sub	r18, r24
    1570:	39 0b       	sbc	r19, r25
    1572:	88 81       	ld	r24, Y
    1574:	81 ff       	sbrs	r24, 1
    1576:	0b c0       	rjmp	.+22     	; 0x158e <udd_ep_trans_complet+0x84>
    1578:	c9 01       	movw	r24, r18
    157a:	b6 01       	movw	r22, r12
    157c:	46 d4       	rcall	.+2188   	; 0x1e0a <__udivmodhi4>
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	89 2b       	or	r24, r25
    1584:	11 f0       	breq	.+4      	; 0x158a <udd_ep_trans_complet+0x80>
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	ca 01       	movw	r24, r20
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <udd_ep_trans_complet+0x88>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	98 81       	ld	r25, Y
    1594:	80 fb       	bst	r24, 0
    1596:	91 f9       	bld	r25, 1
    1598:	98 83       	st	Y, r25
    159a:	d7 01       	movw	r26, r14
    159c:	16 96       	adiw	r26, 0x06	; 6
    159e:	1d 92       	st	X+, r1
    15a0:	1c 92       	st	X, r1
    15a2:	17 97       	sbiw	r26, 0x07	; 7
    15a4:	12 96       	adiw	r26, 0x02	; 2
    15a6:	2d 93       	st	X+, r18
    15a8:	3c 93       	st	X, r19
    15aa:	13 97       	sbiw	r26, 0x03	; 3
    15ac:	29 81       	ldd	r18, Y+1	; 0x01
    15ae:	3a 81       	ldd	r19, Y+2	; 0x02
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	14 96       	adiw	r26, 0x04	; 4
    15ba:	8d 93       	st	X+, r24
    15bc:	9c 93       	st	X, r25
    15be:	15 97       	sbiw	r26, 0x05	; 5
    15c0:	f7 01       	movw	r30, r14
    15c2:	02 e0       	ldi	r16, 0x02	; 2
    15c4:	06 93       	lac	Z, r16
    15c6:	99 c0       	rjmp	.+306    	; 0x16fa <udd_ep_trans_complet+0x1f0>
    15c8:	88 81       	ld	r24, Y
    15ca:	81 ff       	sbrs	r24, 1
    15cc:	87 c0       	rjmp	.+270    	; 0x16dc <udd_ep_trans_complet+0x1d2>
    15ce:	8d 7f       	andi	r24, 0xFD	; 253
    15d0:	88 83       	st	Y, r24
    15d2:	d7 01       	movw	r26, r14
    15d4:	16 96       	adiw	r26, 0x06	; 6
    15d6:	1d 92       	st	X+, r1
    15d8:	1c 92       	st	X, r1
    15da:	17 97       	sbiw	r26, 0x07	; 7
    15dc:	12 96       	adiw	r26, 0x02	; 2
    15de:	1d 92       	st	X+, r1
    15e0:	1c 92       	st	X, r1
    15e2:	13 97       	sbiw	r26, 0x03	; 3
    15e4:	f7 01       	movw	r30, r14
    15e6:	02 e0       	ldi	r16, 0x02	; 2
    15e8:	06 93       	lac	Z, r16
    15ea:	87 c0       	rjmp	.+270    	; 0x16fa <udd_ep_trans_complet+0x1f0>
    15ec:	d7 01       	movw	r26, r14
    15ee:	12 96       	adiw	r26, 0x02	; 2
    15f0:	0d 91       	ld	r16, X+
    15f2:	1c 91       	ld	r17, X
    15f4:	13 97       	sbiw	r26, 0x03	; 3
    15f6:	88 81       	ld	r24, Y
    15f8:	82 ff       	sbrs	r24, 2
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <udd_ep_trans_complet+0x120>
    15fc:	29 81       	ldd	r18, Y+1	; 0x01
    15fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	28 0f       	add	r18, r24
    1606:	39 1f       	adc	r19, r25
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	b6 01       	movw	r22, r12
    160e:	fd d3       	rcall	.+2042   	; 0x1e0a <__udivmodhi4>
    1610:	b0 e4       	ldi	r27, 0x40	; 64
    1612:	bb 9e       	mul	r11, r27
    1614:	f0 01       	movw	r30, r0
    1616:	11 24       	eor	r1, r1
    1618:	e3 51       	subi	r30, 0x13	; 19
    161a:	fe 4d       	sbci	r31, 0xDE	; 222
    161c:	48 2f       	mov	r20, r24
    161e:	59 2f       	mov	r21, r25
    1620:	6e 2f       	mov	r22, r30
    1622:	7f 2f       	mov	r23, r31
    1624:	82 2f       	mov	r24, r18
    1626:	93 2f       	mov	r25, r19
    1628:	04 d4       	rcall	.+2056   	; 0x1e32 <memcpy>
    162a:	2d 81       	ldd	r18, Y+5	; 0x05
    162c:	3e 81       	ldd	r19, Y+6	; 0x06
    162e:	20 0f       	add	r18, r16
    1630:	31 1f       	adc	r19, r17
    1632:	2d 83       	std	Y+5, r18	; 0x05
    1634:	3e 83       	std	Y+6, r19	; 0x06
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	e2 17       	cp	r30, r18
    163c:	f3 07       	cpc	r31, r19
    163e:	10 f4       	brcc	.+4      	; 0x1644 <udd_ep_trans_complet+0x13a>
    1640:	ed 83       	std	Y+5, r30	; 0x05
    1642:	fe 83       	std	Y+6, r31	; 0x06
    1644:	d7 01       	movw	r26, r14
    1646:	16 96       	adiw	r26, 0x06	; 6
    1648:	2d 91       	ld	r18, X+
    164a:	3c 91       	ld	r19, X
    164c:	17 97       	sbiw	r26, 0x07	; 7
    164e:	20 17       	cp	r18, r16
    1650:	31 07       	cpc	r19, r17
    1652:	09 f0       	breq	.+2      	; 0x1656 <udd_ep_trans_complet+0x14c>
    1654:	43 c0       	rjmp	.+134    	; 0x16dc <udd_ep_trans_complet+0x1d2>
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	e8 17       	cp	r30, r24
    165c:	f9 07       	cpc	r31, r25
    165e:	09 f4       	brne	.+2      	; 0x1662 <udd_ep_trans_complet+0x158>
    1660:	3d c0       	rjmp	.+122    	; 0x16dc <udd_ep_trans_complet+0x1d2>
    1662:	e8 1b       	sub	r30, r24
    1664:	f9 0b       	sbc	r31, r25
    1666:	e1 15       	cp	r30, r1
    1668:	b4 e0       	ldi	r27, 0x04	; 4
    166a:	fb 07       	cpc	r31, r27
    166c:	40 f0       	brcs	.+16     	; 0x167e <udd_ep_trans_complet+0x174>
    166e:	ef ef       	ldi	r30, 0xFF	; 255
    1670:	f3 e0       	ldi	r31, 0x03	; 3
    1672:	cf 01       	movw	r24, r30
    1674:	b6 01       	movw	r22, r12
    1676:	c9 d3       	rcall	.+1938   	; 0x1e0a <__udivmodhi4>
    1678:	e8 1b       	sub	r30, r24
    167a:	f9 0b       	sbc	r31, r25
    167c:	05 c0       	rjmp	.+10     	; 0x1688 <udd_ep_trans_complet+0x17e>
    167e:	cf 01       	movw	r24, r30
    1680:	b6 01       	movw	r22, r12
    1682:	c3 d3       	rcall	.+1926   	; 0x1e0a <__udivmodhi4>
    1684:	e8 1b       	sub	r30, r24
    1686:	f9 0b       	sbc	r31, r25
    1688:	d7 01       	movw	r26, r14
    168a:	12 96       	adiw	r26, 0x02	; 2
    168c:	1d 92       	st	X+, r1
    168e:	1c 92       	st	X, r1
    1690:	13 97       	sbiw	r26, 0x03	; 3
    1692:	ec 15       	cp	r30, r12
    1694:	fd 05       	cpc	r31, r13
    1696:	78 f4       	brcc	.+30     	; 0x16b6 <udd_ep_trans_complet+0x1ac>
    1698:	88 81       	ld	r24, Y
    169a:	84 60       	ori	r24, 0x04	; 4
    169c:	88 83       	st	Y, r24
    169e:	b0 e4       	ldi	r27, 0x40	; 64
    16a0:	bb 9e       	mul	r11, r27
    16a2:	c0 01       	movw	r24, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	83 51       	subi	r24, 0x13	; 19
    16a8:	9e 4d       	sbci	r25, 0xDE	; 222
    16aa:	f7 01       	movw	r30, r14
    16ac:	84 83       	std	Z+4, r24	; 0x04
    16ae:	95 83       	std	Z+5, r25	; 0x05
    16b0:	c6 82       	std	Z+6, r12	; 0x06
    16b2:	d7 82       	std	Z+7, r13	; 0x07
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <udd_ep_trans_complet+0x1ca>
    16b6:	29 81       	ldd	r18, Y+1	; 0x01
    16b8:	3a 81       	ldd	r19, Y+2	; 0x02
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	82 0f       	add	r24, r18
    16c0:	93 1f       	adc	r25, r19
    16c2:	d7 01       	movw	r26, r14
    16c4:	14 96       	adiw	r26, 0x04	; 4
    16c6:	8d 93       	st	X+, r24
    16c8:	9c 93       	st	X, r25
    16ca:	15 97       	sbiw	r26, 0x05	; 5
    16cc:	16 96       	adiw	r26, 0x06	; 6
    16ce:	ed 93       	st	X+, r30
    16d0:	fc 93       	st	X, r31
    16d2:	17 97       	sbiw	r26, 0x07	; 7
    16d4:	f7 01       	movw	r30, r14
    16d6:	02 e0       	ldi	r16, 0x02	; 2
    16d8:	06 93       	lac	Z, r16
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <udd_ep_trans_complet+0x1f0>
    16dc:	88 81       	ld	r24, Y
    16de:	80 ff       	sbrs	r24, 0
    16e0:	0c c0       	rjmp	.+24     	; 0x16fa <udd_ep_trans_complet+0x1f0>
    16e2:	8e 7f       	andi	r24, 0xFE	; 254
    16e4:	88 83       	st	Y, r24
    16e6:	ef 81       	ldd	r30, Y+7	; 0x07
    16e8:	f8 85       	ldd	r31, Y+8	; 0x08
    16ea:	30 97       	sbiw	r30, 0x00	; 0
    16ec:	31 f0       	breq	.+12     	; 0x16fa <udd_ep_trans_complet+0x1f0>
    16ee:	6d 81       	ldd	r22, Y+5	; 0x05
    16f0:	7e 81       	ldd	r23, Y+6	; 0x06
    16f2:	4b 2d       	mov	r20, r11
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	09 95       	icall
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	df 90       	pop	r13
    1708:	cf 90       	pop	r12
    170a:	bf 90       	pop	r11
    170c:	08 95       	ret

0000170e <udd_attach>:
    170e:	cf 93       	push	r28
    1710:	cf b7       	in	r28, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	e8 dc       	rcall	.-1584   	; 0x10e8 <udd_sleep_mode>
    1718:	ea ec       	ldi	r30, 0xCA	; 202
    171a:	f4 e0       	ldi	r31, 0x04	; 4
    171c:	80 e4       	ldi	r24, 0x40	; 64
    171e:	80 83       	st	Z, r24
    1720:	80 e2       	ldi	r24, 0x20	; 32
    1722:	80 83       	st	Z, r24
    1724:	e1 ec       	ldi	r30, 0xC1	; 193
    1726:	f4 e0       	ldi	r31, 0x04	; 4
    1728:	80 81       	ld	r24, Z
    172a:	81 60       	ori	r24, 0x01	; 1
    172c:	80 83       	st	Z, r24
    172e:	a9 ec       	ldi	r26, 0xC9	; 201
    1730:	b4 e0       	ldi	r27, 0x04	; 4
    1732:	8c 91       	ld	r24, X
    1734:	82 60       	ori	r24, 0x02	; 2
    1736:	8c 93       	st	X, r24
    1738:	e8 ec       	ldi	r30, 0xC8	; 200
    173a:	f4 e0       	ldi	r31, 0x04	; 4
    173c:	80 81       	ld	r24, Z
    173e:	80 64       	ori	r24, 0x40	; 64
    1740:	80 83       	st	Z, r24
    1742:	8c 91       	ld	r24, X
    1744:	81 60       	ori	r24, 0x01	; 1
    1746:	8c 93       	st	X, r24
    1748:	80 81       	ld	r24, Z
    174a:	80 68       	ori	r24, 0x80	; 128
    174c:	80 83       	st	Z, r24
    174e:	cf bf       	out	0x3f, r28	; 63
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <udd_enable>:
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	c0 e6       	ldi	r28, 0x60	; 96
    175a:	d0 e0       	ldi	r29, 0x00	; 0
    175c:	18 82       	st	Y, r1
    175e:	80 e3       	ldi	r24, 0x30	; 48
    1760:	0e 94 71 01 	call	0x2e2	; 0x2e2 <sysclk_enable_usb>
    1764:	e0 ec       	ldi	r30, 0xC0	; 192
    1766:	f4 e0       	ldi	r31, 0x04	; 4
    1768:	80 81       	ld	r24, Z
    176a:	80 64       	ori	r24, 0x40	; 64
    176c:	80 83       	st	Z, r24
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	88 83       	st	Y, r24
    1772:	cf b7       	in	r28, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	10 92 d5 21 	sts	0x21D5, r1
    177a:	10 92 dd 21 	sts	0x21DD, r1
    177e:	10 92 e5 21 	sts	0x21E5, r1
    1782:	10 92 ed 21 	sts	0x21ED, r1
    1786:	10 92 f5 21 	sts	0x21F5, r1
    178a:	10 92 fd 21 	sts	0x21FD, r1
    178e:	e8 e0       	ldi	r30, 0x08	; 8
    1790:	f2 e2       	ldi	r31, 0x22	; 34
    1792:	80 81       	ld	r24, Z
    1794:	8e 7f       	andi	r24, 0xFE	; 254
    1796:	80 83       	st	Z, r24
    1798:	e1 e1       	ldi	r30, 0x11	; 17
    179a:	f2 e2       	ldi	r31, 0x22	; 34
    179c:	80 81       	ld	r24, Z
    179e:	8e 7f       	andi	r24, 0xFE	; 254
    17a0:	80 83       	st	Z, r24
    17a2:	ea e1       	ldi	r30, 0x1A	; 26
    17a4:	f2 e2       	ldi	r31, 0x22	; 34
    17a6:	80 81       	ld	r24, Z
    17a8:	8e 7f       	andi	r24, 0xFE	; 254
    17aa:	80 83       	st	Z, r24
    17ac:	e3 e2       	ldi	r30, 0x23	; 35
    17ae:	f2 e2       	ldi	r31, 0x22	; 34
    17b0:	80 81       	ld	r24, Z
    17b2:	8e 7f       	andi	r24, 0xFE	; 254
    17b4:	80 83       	st	Z, r24
    17b6:	6a e1       	ldi	r22, 0x1A	; 26
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	8b dc       	rcall	.-1770   	; 0x10d4 <nvm_read_byte>
    17be:	8f 3f       	cpi	r24, 0xFF	; 255
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <udd_enable+0x74>
    17c2:	80 93 fa 04 	sts	0x04FA, r24
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <udd_enable+0x7a>
    17c8:	8f e1       	ldi	r24, 0x1F	; 31
    17ca:	80 93 fa 04 	sts	0x04FA, r24
    17ce:	6b e1       	ldi	r22, 0x1B	; 27
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	7f dc       	rcall	.-1794   	; 0x10d4 <nvm_read_byte>
    17d6:	8f 3f       	cpi	r24, 0xFF	; 255
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <udd_enable+0x8c>
    17da:	80 93 fb 04 	sts	0x04FB, r24
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <udd_enable+0x92>
    17e0:	8f e1       	ldi	r24, 0x1F	; 31
    17e2:	80 93 fb 04 	sts	0x04FB, r24
    17e6:	e0 ec       	ldi	r30, 0xC0	; 192
    17e8:	f4 e0       	ldi	r31, 0x04	; 4
    17ea:	80 81       	ld	r24, Z
    17ec:	82 60       	ori	r24, 0x02	; 2
    17ee:	80 83       	st	Z, r24
    17f0:	80 81       	ld	r24, Z
    17f2:	80 68       	ori	r24, 0x80	; 128
    17f4:	80 83       	st	Z, r24
    17f6:	80 81       	ld	r24, Z
    17f8:	80 61       	ori	r24, 0x10	; 16
    17fa:	80 83       	st	Z, r24
    17fc:	84 ed       	ldi	r24, 0xD4	; 212
    17fe:	91 e2       	ldi	r25, 0x21	; 33
    1800:	86 83       	std	Z+6, r24	; 0x06
    1802:	97 83       	std	Z+7, r25	; 0x07
    1804:	80 81       	ld	r24, Z
    1806:	80 62       	ori	r24, 0x20	; 32
    1808:	80 83       	st	Z, r24
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	80 93 c5 04 	sts	0x04C5, r24
    1810:	e8 ec       	ldi	r30, 0xC8	; 200
    1812:	f4 e0       	ldi	r31, 0x04	; 4
    1814:	80 81       	ld	r24, Z
    1816:	81 60       	ori	r24, 0x01	; 1
    1818:	80 83       	st	Z, r24
    181a:	10 92 2c 22 	sts	0x222C, r1
    181e:	8f b7       	in	r24, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	ea ef       	ldi	r30, 0xFA	; 250
    1824:	f2 e2       	ldi	r31, 0x22	; 34
    1826:	90 81       	ld	r25, Z
    1828:	9f 5f       	subi	r25, 0xFF	; 255
    182a:	90 83       	st	Z, r25
    182c:	8f bf       	out	0x3f, r24	; 63
    182e:	6f df       	rcall	.-290    	; 0x170e <udd_attach>
    1830:	cf bf       	out	0x3f, r28	; 63
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	08 95       	ret

00001838 <udd_is_high_speed>:
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	08 95       	ret

0000183c <udd_set_address>:
    183c:	80 93 c3 04 	sts	0x04C3, r24
    1840:	08 95       	ret

00001842 <udd_getaddress>:
    1842:	80 91 c3 04 	lds	r24, 0x04C3
    1846:	08 95       	ret

00001848 <udd_get_frame_number>:
    1848:	20 91 04 22 	lds	r18, 0x2204
    184c:	30 91 05 22 	lds	r19, 0x2205
    1850:	82 2f       	mov	r24, r18
    1852:	93 2f       	mov	r25, r19
    1854:	08 95       	ret

00001856 <udd_get_micro_frame_number>:
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	08 95       	ret

0000185c <udd_set_setup_payload>:
    185c:	80 93 03 23 	sts	0x2303, r24
    1860:	90 93 04 23 	sts	0x2304, r25
    1864:	60 93 05 23 	sts	0x2305, r22
    1868:	70 93 06 23 	sts	0x2306, r23
    186c:	08 95       	ret

0000186e <udd_ep_alloc>:
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	f8 2e       	mov	r15, r24
    187c:	e6 2e       	mov	r14, r22
    187e:	8a 01       	movw	r16, r20
    1880:	52 dc       	rcall	.-1884   	; 0x1126 <udd_ep_get_ctrl>
    1882:	ec 01       	movw	r28, r24
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	80 7c       	andi	r24, 0xC0	; 192
    1888:	89 f4       	brne	.+34     	; 0x18ac <udd_ep_alloc+0x3e>
    188a:	a8 01       	movw	r20, r16
    188c:	6e 2d       	mov	r22, r14
    188e:	8f 2d       	mov	r24, r15
    1890:	63 dc       	rcall	.-1850   	; 0x1158 <udd_ep_init>
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	80 7c       	andi	r24, 0xC0	; 192
    1896:	80 3c       	cpi	r24, 0xC0	; 192
    1898:	21 f4       	brne	.+8      	; 0x18a2 <udd_ep_alloc+0x34>
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	87 70       	andi	r24, 0x07	; 7
    189e:	87 30       	cpi	r24, 0x07	; 7
    18a0:	39 f0       	breq	.+14     	; 0x18b0 <udd_ep_alloc+0x42>
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	80 62       	ori	r24, 0x20	; 32
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <udd_ep_alloc+0x44>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <udd_ep_alloc+0x44>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	08 95       	ret

000018c0 <udd_ep_is_halted>:
    18c0:	32 dc       	rcall	.-1948   	; 0x1126 <udd_ep_get_ctrl>
    18c2:	fc 01       	movw	r30, r24
    18c4:	81 81       	ldd	r24, Z+1	; 0x01
    18c6:	82 fb       	bst	r24, 2
    18c8:	88 27       	eor	r24, r24
    18ca:	80 f9       	bld	r24, 0
    18cc:	08 95       	ret

000018ce <udd_ep_clear_halt>:
    18ce:	cf 93       	push	r28
    18d0:	c8 2f       	mov	r28, r24
    18d2:	29 dc       	rcall	.-1966   	; 0x1126 <udd_ep_get_ctrl>
    18d4:	fc 01       	movw	r30, r24
    18d6:	81 81       	ldd	r24, Z+1	; 0x01
    18d8:	82 ff       	sbrs	r24, 2
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <udd_ep_clear_halt+0x2c>
    18dc:	81 81       	ldd	r24, Z+1	; 0x01
    18de:	8b 7f       	andi	r24, 0xFB	; 251
    18e0:	81 83       	std	Z+1, r24	; 0x01
    18e2:	8c 2f       	mov	r24, r28
    18e4:	7e dd       	rcall	.-1284   	; 0x13e2 <udd_ep_get_job>
    18e6:	fc 01       	movw	r30, r24
    18e8:	80 81       	ld	r24, Z
    18ea:	80 ff       	sbrs	r24, 0
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <udd_ep_clear_halt+0x2c>
    18ee:	8e 7f       	andi	r24, 0xFE	; 254
    18f0:	80 83       	st	Z, r24
    18f2:	07 80       	ldd	r0, Z+7	; 0x07
    18f4:	f0 85       	ldd	r31, Z+8	; 0x08
    18f6:	e0 2d       	mov	r30, r0
    18f8:	09 95       	icall
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <udd_ep_run>:
    1900:	8f 92       	push	r8
    1902:	9f 92       	push	r9
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	98 2e       	mov	r9, r24
    191a:	86 2e       	mov	r8, r22
    191c:	5a 01       	movw	r10, r20
    191e:	69 01       	movw	r12, r18
    1920:	60 dd       	rcall	.-1344   	; 0x13e2 <udd_ep_get_job>
    1922:	7c 01       	movw	r14, r24
    1924:	89 2d       	mov	r24, r9
    1926:	ff db       	rcall	.-2050   	; 0x1126 <udd_ep_get_ctrl>
    1928:	ec 01       	movw	r28, r24
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	80 7c       	andi	r24, 0xC0	; 192
    192e:	09 f4       	brne	.+2      	; 0x1932 <udd_ep_run+0x32>
    1930:	4d c0       	rjmp	.+154    	; 0x19cc <udd_ep_run+0xcc>
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	80 7c       	andi	r24, 0xC0	; 192
    1936:	80 3c       	cpi	r24, 0xC0	; 192
    1938:	19 f0       	breq	.+6      	; 0x1940 <udd_ep_run+0x40>
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	82 fd       	sbrc	r24, 2
    193e:	48 c0       	rjmp	.+144    	; 0x19d0 <udd_ep_run+0xd0>
    1940:	8f b7       	in	r24, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	f7 01       	movw	r30, r14
    1946:	90 81       	ld	r25, Z
    1948:	90 ff       	sbrs	r25, 0
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <udd_ep_run+0x52>
    194c:	8f bf       	out	0x3f, r24	; 63
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	40 c0       	rjmp	.+128    	; 0x19d2 <udd_ep_run+0xd2>
    1952:	f7 01       	movw	r30, r14
    1954:	90 81       	ld	r25, Z
    1956:	91 60       	ori	r25, 0x01	; 1
    1958:	90 83       	st	Z, r25
    195a:	8f bf       	out	0x3f, r24	; 63
    195c:	a1 82       	std	Z+1, r10	; 0x01
    195e:	b2 82       	std	Z+2, r11	; 0x02
    1960:	c3 82       	std	Z+3, r12	; 0x03
    1962:	d4 82       	std	Z+4, r13	; 0x04
    1964:	15 82       	std	Z+5, r1	; 0x05
    1966:	16 82       	std	Z+6, r1	; 0x06
    1968:	07 83       	std	Z+7, r16	; 0x07
    196a:	10 87       	std	Z+8, r17	; 0x08
    196c:	81 10       	cpse	r8, r1
    196e:	08 c0       	rjmp	.+16     	; 0x1980 <udd_ep_run+0x80>
    1970:	21 e0       	ldi	r18, 0x01	; 1
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	c1 14       	cp	r12, r1
    1976:	d1 04       	cpc	r13, r1
    1978:	29 f0       	breq	.+10     	; 0x1984 <udd_ep_run+0x84>
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <udd_ep_run+0x84>
    1980:	21 e0       	ldi	r18, 0x01	; 1
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	f7 01       	movw	r30, r14
    1986:	80 81       	ld	r24, Z
    1988:	20 fb       	bst	r18, 0
    198a:	81 f9       	bld	r24, 1
    198c:	8b 7f       	andi	r24, 0xFB	; 251
    198e:	80 83       	st	Z, r24
    1990:	99 20       	and	r9, r9
    1992:	1c f4       	brge	.+6      	; 0x199a <udd_ep_run+0x9a>
    1994:	1e 82       	std	Y+6, r1	; 0x06
    1996:	1f 82       	std	Y+7, r1	; 0x07
    1998:	15 c0       	rjmp	.+42     	; 0x19c4 <udd_ep_run+0xc4>
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	80 7c       	andi	r24, 0xC0	; 192
    199e:	80 3c       	cpi	r24, 0xC0	; 192
    19a0:	69 f4       	brne	.+26     	; 0x19bc <udd_ep_run+0xbc>
    19a2:	ce 01       	movw	r24, r28
    19a4:	f3 dc       	rcall	.-1562   	; 0x138c <udd_ep_get_size>
    19a6:	bc 01       	movw	r22, r24
    19a8:	c6 01       	movw	r24, r12
    19aa:	2f d2       	rcall	.+1118   	; 0x1e0a <__udivmodhi4>
    19ac:	89 2b       	or	r24, r25
    19ae:	31 f0       	breq	.+12     	; 0x19bc <udd_ep_run+0xbc>
    19b0:	f7 01       	movw	r30, r14
    19b2:	80 81       	ld	r24, Z
    19b4:	8e 7f       	andi	r24, 0xFE	; 254
    19b6:	80 83       	st	Z, r24
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	0b c0       	rjmp	.+22     	; 0x19d2 <udd_ep_run+0xd2>
    19bc:	1a 82       	std	Y+2, r1	; 0x02
    19be:	1b 82       	std	Y+3, r1	; 0x03
    19c0:	1e 82       	std	Y+6, r1	; 0x06
    19c2:	1f 82       	std	Y+7, r1	; 0x07
    19c4:	89 2d       	mov	r24, r9
    19c6:	a1 dd       	rcall	.-1214   	; 0x150a <udd_ep_trans_complet>
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <udd_ep_run+0xd2>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <udd_ep_run+0xd2>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	bf 90       	pop	r11
    19e4:	af 90       	pop	r10
    19e6:	9f 90       	pop	r9
    19e8:	8f 90       	pop	r8
    19ea:	08 95       	ret

000019ec <udd_ep_abort>:
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	18 2f       	mov	r17, r24
    19f6:	97 db       	rcall	.-2258   	; 0x1126 <udd_ep_get_ctrl>
    19f8:	ec 01       	movw	r28, r24
    19fa:	81 2f       	mov	r24, r17
    19fc:	f2 dc       	rcall	.-1564   	; 0x13e2 <udd_ep_get_job>
    19fe:	dc 01       	movw	r26, r24
    1a00:	fe 01       	movw	r30, r28
    1a02:	02 e0       	ldi	r16, 0x02	; 2
    1a04:	05 93       	las	Z, r16
    1a06:	8c 91       	ld	r24, X
    1a08:	80 ff       	sbrs	r24, 0
    1a0a:	13 c0       	rjmp	.+38     	; 0x1a32 <udd_ep_abort+0x46>
    1a0c:	8e 7f       	andi	r24, 0xFE	; 254
    1a0e:	8c 93       	st	X, r24
    1a10:	17 96       	adiw	r26, 0x07	; 7
    1a12:	ed 91       	ld	r30, X+
    1a14:	fc 91       	ld	r31, X
    1a16:	18 97       	sbiw	r26, 0x08	; 8
    1a18:	30 97       	sbiw	r30, 0x00	; 0
    1a1a:	59 f0       	breq	.+22     	; 0x1a32 <udd_ep_abort+0x46>
    1a1c:	11 23       	and	r17, r17
    1a1e:	1c f4       	brge	.+6      	; 0x1a26 <udd_ep_abort+0x3a>
    1a20:	6e 81       	ldd	r22, Y+6	; 0x06
    1a22:	7f 81       	ldd	r23, Y+7	; 0x07
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <udd_ep_abort+0x3e>
    1a26:	6a 81       	ldd	r22, Y+2	; 0x02
    1a28:	7b 81       	ldd	r23, Y+3	; 0x03
    1a2a:	41 2f       	mov	r20, r17
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	09 95       	icall
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <udd_ep_set_halt>:
    1a3c:	0f 93       	push	r16
    1a3e:	cf 93       	push	r28
    1a40:	c8 2f       	mov	r28, r24
    1a42:	71 db       	rcall	.-2334   	; 0x1126 <udd_ep_get_ctrl>
    1a44:	fc 01       	movw	r30, r24
    1a46:	81 81       	ldd	r24, Z+1	; 0x01
    1a48:	84 60       	ori	r24, 0x04	; 4
    1a4a:	81 83       	std	Z+1, r24	; 0x01
    1a4c:	01 e0       	ldi	r16, 0x01	; 1
    1a4e:	06 93       	lac	Z, r16
    1a50:	8c 2f       	mov	r24, r28
    1a52:	cc df       	rcall	.-104    	; 0x19ec <udd_ep_abort>
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	cf 91       	pop	r28
    1a58:	0f 91       	pop	r16
    1a5a:	08 95       	ret

00001a5c <udd_ep_free>:
    1a5c:	cf 93       	push	r28
    1a5e:	c8 2f       	mov	r28, r24
    1a60:	c5 df       	rcall	.-118    	; 0x19ec <udd_ep_abort>
    1a62:	8c 2f       	mov	r24, r28
    1a64:	60 db       	rcall	.-2368   	; 0x1126 <udd_ep_get_ctrl>
    1a66:	fc 01       	movw	r30, r24
    1a68:	11 82       	std	Z+1, r1	; 0x01
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1a6e:	1f 92       	push	r1
    1a70:	0f 92       	push	r0
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	0f 92       	push	r0
    1a76:	11 24       	eor	r1, r1
    1a78:	0f 93       	push	r16
    1a7a:	2f 93       	push	r18
    1a7c:	3f 93       	push	r19
    1a7e:	4f 93       	push	r20
    1a80:	5f 93       	push	r21
    1a82:	6f 93       	push	r22
    1a84:	7f 93       	push	r23
    1a86:	8f 93       	push	r24
    1a88:	9f 93       	push	r25
    1a8a:	af 93       	push	r26
    1a8c:	bf 93       	push	r27
    1a8e:	ef 93       	push	r30
    1a90:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1a92:	80 91 cb 04 	lds	r24, 0x04CB
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <__vector_125+0x36>
		udd_ack_start_of_frame_event();
    1a9a:	80 e8       	ldi	r24, 0x80	; 128
    1a9c:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1aa0:	54 d8       	rcall	.-3928   	; 0xb4a <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1aa2:	84 c0       	rjmp	.+264    	; 0x1bac <__vector_125+0x13e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1aa4:	80 91 cb 04 	lds	r24, 0x04CB
    1aa8:	82 ff       	sbrs	r24, 2
    1aaa:	23 c0       	rjmp	.+70     	; 0x1af2 <__vector_125+0x84>
		udd_ack_underflow_event();
    1aac:	84 e0       	ldi	r24, 0x04	; 4
    1aae:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1ab2:	80 91 dc 21 	lds	r24, 0x21DC
    1ab6:	86 ff       	sbrs	r24, 6
    1ab8:	79 c0       	rjmp	.+242    	; 0x1bac <__vector_125+0x13e>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1aba:	80 91 cc 04 	lds	r24, 0x04CC
    1abe:	81 fd       	sbrc	r24, 1
    1ac0:	75 c0       	rjmp	.+234    	; 0x1bac <__vector_125+0x13e>
    1ac2:	ad dc       	rcall	.-1702   	; 0x141e <udd_ctrl_interrupt_tc_setup>
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	72 c0       	rjmp	.+228    	; 0x1bac <__vector_125+0x13e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1ac8:	80 91 ed 22 	lds	r24, 0x22ED
    1acc:	90 91 ee 22 	lds	r25, 0x22EE
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	11 f4       	brne	.+4      	; 0x1ada <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1ad6:	ca db       	rcall	.-2156   	; 0x126c <udd_ctrl_send_zlp_in>
    1ad8:	69 c0       	rjmp	.+210    	; 0x1bac <__vector_125+0x13e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1ada:	04 97       	sbiw	r24, 0x04	; 4
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <__vector_125+0x72>
    1ade:	66 c0       	rjmp	.+204    	; 0x1bac <__vector_125+0x13e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1ae0:	ed ed       	ldi	r30, 0xDD	; 221
    1ae2:	f1 e2       	ldi	r31, 0x21	; 33
    1ae4:	04 e0       	ldi	r16, 0x04	; 4
    1ae6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1ae8:	e5 ed       	ldi	r30, 0xD5	; 213
    1aea:	f1 e2       	ldi	r31, 0x21	; 33
    1aec:	04 e0       	ldi	r16, 0x04	; 4
    1aee:	05 93       	las	Z, r16
    1af0:	5d c0       	rjmp	.+186    	; 0x1bac <__vector_125+0x13e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1af2:	80 91 cb 04 	lds	r24, 0x04CB
    1af6:	81 ff       	sbrs	r24, 1
    1af8:	54 c0       	rjmp	.+168    	; 0x1ba2 <__vector_125+0x134>
		udd_ack_overflow_event();
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1b00:	80 91 d4 21 	lds	r24, 0x21D4
    1b04:	86 ff       	sbrs	r24, 6
    1b06:	52 c0       	rjmp	.+164    	; 0x1bac <__vector_125+0x13e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1b08:	80 91 cc 04 	lds	r24, 0x04CC
    1b0c:	81 fd       	sbrc	r24, 1
    1b0e:	4e c0       	rjmp	.+156    	; 0x1bac <__vector_125+0x13e>
    1b10:	86 dc       	rcall	.-1780   	; 0x141e <udd_ctrl_interrupt_tc_setup>
    1b12:	81 11       	cpse	r24, r1
    1b14:	4b c0       	rjmp	.+150    	; 0x1bac <__vector_125+0x13e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1b16:	80 91 ed 22 	lds	r24, 0x22ED
    1b1a:	90 91 ee 22 	lds	r25, 0x22EE
    1b1e:	82 30       	cpi	r24, 0x02	; 2
    1b20:	91 05       	cpc	r25, r1
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <__vector_125+0xba>
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
    1b24:	b4 db       	rcall	.-2200   	; 0x128e <udd_ctrl_send_zlp_out>
    1b26:	42 c0       	rjmp	.+132    	; 0x1bac <__vector_125+0x13e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1b28:	03 97       	sbiw	r24, 0x03	; 3
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <__vector_125+0xc0>
    1b2c:	3f c0       	rjmp	.+126    	; 0x1bac <__vector_125+0x13e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1b2e:	ed ed       	ldi	r30, 0xDD	; 221
    1b30:	f1 e2       	ldi	r31, 0x21	; 33
    1b32:	04 e0       	ldi	r16, 0x04	; 4
    1b34:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1b36:	e5 ed       	ldi	r30, 0xD5	; 213
    1b38:	f1 e2       	ldi	r31, 0x21	; 33
    1b3a:	04 e0       	ldi	r16, 0x04	; 4
    1b3c:	05 93       	las	Z, r16
    1b3e:	36 c0       	rjmp	.+108    	; 0x1bac <__vector_125+0x13e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1b40:	80 e1       	ldi	r24, 0x10	; 16
    1b42:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	51 df       	rcall	.-350    	; 0x19ec <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1b4a:	81 e8       	ldi	r24, 0x81	; 129
    1b4c:	4f df       	rcall	.-354    	; 0x19ec <udd_ep_abort>
		}
#endif
		udc_reset();
    1b4e:	0e 94 7e 05 	call	0xafc	; 0xafc <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1b52:	10 92 c3 04 	sts	0x04C3, r1
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
    1b56:	40 e4       	ldi	r20, 0x40	; 64
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	fc da       	rcall	.-2568   	; 0x1158 <udd_ep_init>
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
    1b60:	40 e4       	ldi	r20, 0x40	; 64
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	80 e8       	ldi	r24, 0x80	; 128
    1b68:	f7 da       	rcall	.-2578   	; 0x1158 <udd_ep_init>
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1b6a:	8d ea       	ldi	r24, 0xAD	; 173
    1b6c:	92 e2       	ldi	r25, 0x22	; 34
    1b6e:	80 93 d8 21 	sts	0x21D8, r24
    1b72:	90 93 d9 21 	sts	0x21D9, r25
		// Reset endpoint control management
		udd_ctrl_init();
    1b76:	3c db       	rcall	.-2440   	; 0x11f0 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    1b78:	19 c0       	rjmp	.+50     	; 0x1bac <__vector_125+0x13e>
	}

	if (udd_is_suspend_event()) {
    1b7a:	80 91 cb 04 	lds	r24, 0x04CB
    1b7e:	86 ff       	sbrs	r24, 6
    1b80:	06 c0       	rjmp	.+12     	; 0x1b8e <__vector_125+0x120>
		udd_ack_suspend_event();
    1b82:	80 e4       	ldi	r24, 0x40	; 64
    1b84:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	ae da       	rcall	.-2724   	; 0x10e8 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1b8c:	0f c0       	rjmp	.+30     	; 0x1bac <__vector_125+0x13e>
	}

	if (udd_is_resume_event()) {
    1b8e:	80 91 cb 04 	lds	r24, 0x04CB
    1b92:	85 ff       	sbrs	r24, 5
    1b94:	0b c0       	rjmp	.+22     	; 0x1bac <__vector_125+0x13e>
		udd_ack_resume_event();
    1b96:	80 e2       	ldi	r24, 0x20	; 32
    1b98:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	a4 da       	rcall	.-2744   	; 0x10e8 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1ba0:	05 c0       	rjmp	.+10     	; 0x1bac <__vector_125+0x13e>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1ba2:	80 91 cb 04 	lds	r24, 0x04CB
    1ba6:	84 fd       	sbrc	r24, 4
    1ba8:	cb cf       	rjmp	.-106    	; 0x1b40 <__vector_125+0xd2>
    1baa:	e7 cf       	rjmp	.-50     	; 0x1b7a <__vector_125+0x10c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1bac:	ff 91       	pop	r31
    1bae:	ef 91       	pop	r30
    1bb0:	bf 91       	pop	r27
    1bb2:	af 91       	pop	r26
    1bb4:	9f 91       	pop	r25
    1bb6:	8f 91       	pop	r24
    1bb8:	7f 91       	pop	r23
    1bba:	6f 91       	pop	r22
    1bbc:	5f 91       	pop	r21
    1bbe:	4f 91       	pop	r20
    1bc0:	3f 91       	pop	r19
    1bc2:	2f 91       	pop	r18
    1bc4:	0f 91       	pop	r16
    1bc6:	0f 90       	pop	r0
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	0f 90       	pop	r0
    1bcc:	1f 90       	pop	r1
    1bce:	18 95       	reti

00001bd0 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1bd0:	1f 92       	push	r1
    1bd2:	0f 92       	push	r0
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	0f 92       	push	r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	2f 93       	push	r18
    1be0:	3f 93       	push	r19
    1be2:	4f 93       	push	r20
    1be4:	5f 93       	push	r21
    1be6:	6f 93       	push	r22
    1be8:	7f 93       	push	r23
    1bea:	8f 93       	push	r24
    1bec:	9f 93       	push	r25
    1bee:	af 93       	push	r26
    1bf0:	bf 93       	push	r27
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	ef 93       	push	r30
    1bf8:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1bfa:	80 91 cc 04 	lds	r24, 0x04CC
    1bfe:	81 fd       	sbrc	r24, 1
    1c00:	03 c0       	rjmp	.+6      	; 0x1c08 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1c02:	0d dc       	rcall	.-2022   	; 0x141e <udd_ctrl_interrupt_tc_setup>
    1c04:	81 11       	cpse	r24, r1
    1c06:	ac c0       	rjmp	.+344    	; 0x1d60 <__vector_126+0x190>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1c0e:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    1c12:	81 95       	neg	r24
    1c14:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1c16:	e4 ed       	ldi	r30, 0xD4	; 212
    1c18:	f1 e2       	ldi	r31, 0x21	; 33
    1c1a:	e8 1b       	sub	r30, r24
    1c1c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1c1e:	20 81       	ld	r18, Z
    1c20:	31 81       	ldd	r19, Z+1	; 0x01
    1c22:	24 5d       	subi	r18, 0xD4	; 212
    1c24:	31 42       	sbci	r19, 0x21	; 33
    1c26:	36 95       	lsr	r19
    1c28:	27 95       	ror	r18
    1c2a:	36 95       	lsr	r19
    1c2c:	27 95       	ror	r18
    1c2e:	36 95       	lsr	r19
    1c30:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1c32:	82 2f       	mov	r24, r18
    1c34:	86 95       	lsr	r24
    1c36:	20 ff       	sbrs	r18, 0
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <__vector_126+0x6e>
    1c3a:	c0 e8       	ldi	r28, 0x80	; 128
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <__vector_126+0x70>
    1c3e:	c0 e0       	ldi	r28, 0x00	; 0
    1c40:	c8 0f       	add	r28, r24
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1c42:	8c 2f       	mov	r24, r28
    1c44:	70 da       	rcall	.-2848   	; 0x1126 <udd_ep_get_ctrl>
    1c46:	fc 01       	movw	r30, r24
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1c48:	80 81       	ld	r24, Z
    1c4a:	85 ff       	sbrs	r24, 5
    1c4c:	89 c0       	rjmp	.+274    	; 0x1d60 <__vector_126+0x190>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1c4e:	00 e2       	ldi	r16, 0x20	; 32
    1c50:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1c52:	c1 11       	cpse	r28, r1
    1c54:	7f c0       	rjmp	.+254    	; 0x1d54 <__vector_126+0x184>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1c56:	80 91 ed 22 	lds	r24, 0x22ED
    1c5a:	90 91 ee 22 	lds	r25, 0x22EE
    1c5e:	04 97       	sbiw	r24, 0x04	; 4
    1c60:	19 f4       	brne	.+6      	; 0x1c68 <__vector_126+0x98>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1c62:	22 db       	rcall	.-2492   	; 0x12a8 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1c64:	c5 da       	rcall	.-2678   	; 0x11f0 <udd_ctrl_init>
    1c66:	7c c0       	rjmp	.+248    	; 0x1d60 <__vector_126+0x190>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1c68:	c0 91 d6 21 	lds	r28, 0x21D6
    1c6c:	d0 91 d7 21 	lds	r29, 0x21D7

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1c70:	80 91 05 23 	lds	r24, 0x2305
    1c74:	90 91 06 23 	lds	r25, 0x2306
    1c78:	00 91 f1 22 	lds	r16, 0x22F1
    1c7c:	10 91 f2 22 	lds	r17, 0x22F2
    1c80:	98 01       	movw	r18, r16
    1c82:	2c 0f       	add	r18, r28
    1c84:	3d 1f       	adc	r19, r29
    1c86:	82 17       	cp	r24, r18
    1c88:	93 07       	cpc	r25, r19
    1c8a:	18 f4       	brcc	.+6      	; 0x1c92 <__vector_126+0xc2>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1c8c:	ec 01       	movw	r28, r24
    1c8e:	c0 1b       	sub	r28, r16
    1c90:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1c92:	20 91 03 23 	lds	r18, 0x2303
    1c96:	30 91 04 23 	lds	r19, 0x2304
    1c9a:	20 0f       	add	r18, r16
    1c9c:	31 1f       	adc	r19, r17
    1c9e:	8d ea       	ldi	r24, 0xAD	; 173
    1ca0:	92 e2       	ldi	r25, 0x22	; 34
    1ca2:	4c 2f       	mov	r20, r28
    1ca4:	5d 2f       	mov	r21, r29
    1ca6:	68 2f       	mov	r22, r24
    1ca8:	79 2f       	mov	r23, r25
    1caa:	82 2f       	mov	r24, r18
    1cac:	93 2f       	mov	r25, r19
    1cae:	c1 d0       	rcall	.+386    	; 0x1e32 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1cb0:	0c 0f       	add	r16, r28
    1cb2:	1d 1f       	adc	r17, r29
    1cb4:	00 93 f1 22 	sts	0x22F1, r16
    1cb8:	10 93 f2 22 	sts	0x22F2, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1cbc:	c0 34       	cpi	r28, 0x40	; 64
    1cbe:	d1 05       	cpc	r29, r1
    1cc0:	69 f4       	brne	.+26     	; 0x1cdc <__vector_126+0x10c>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1cc2:	80 91 ef 22 	lds	r24, 0x22EF
    1cc6:	90 91 f0 22 	lds	r25, 0x22F0
    1cca:	80 0f       	add	r24, r16
    1ccc:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1cce:	20 91 01 23 	lds	r18, 0x2301
    1cd2:	30 91 02 23 	lds	r19, 0x2302
    1cd6:	82 17       	cp	r24, r18
    1cd8:	93 07       	cpc	r25, r19
    1cda:	88 f0       	brcs	.+34     	; 0x1cfe <__vector_126+0x12e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1cdc:	00 93 05 23 	sts	0x2305, r16
    1ce0:	10 93 06 23 	sts	0x2306, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1ce4:	e0 91 09 23 	lds	r30, 0x2309
    1ce8:	f0 91 0a 23 	lds	r31, 0x230A
    1cec:	30 97       	sbiw	r30, 0x00	; 0
    1cee:	29 f0       	breq	.+10     	; 0x1cfa <__vector_126+0x12a>
			if (!udd_g_ctrlreq.over_under_run()) {
    1cf0:	09 95       	icall
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <__vector_126+0x12a>
				// Stall ZLP
				udd_ctrl_stall_data();
    1cf6:	a9 da       	rcall	.-2734   	; 0x124a <udd_ctrl_stall_data>
    1cf8:	33 c0       	rjmp	.+102    	; 0x1d60 <__vector_126+0x190>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1cfa:	b8 da       	rcall	.-2704   	; 0x126c <udd_ctrl_send_zlp_in>
    1cfc:	31 c0       	rjmp	.+98     	; 0x1d60 <__vector_126+0x190>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1cfe:	80 91 05 23 	lds	r24, 0x2305
    1d02:	90 91 06 23 	lds	r25, 0x2306
    1d06:	08 17       	cp	r16, r24
    1d08:	19 07       	cpc	r17, r25
    1d0a:	f9 f4       	brne	.+62     	; 0x1d4a <__vector_126+0x17a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1d0c:	e0 91 09 23 	lds	r30, 0x2309
    1d10:	f0 91 0a 23 	lds	r31, 0x230A
    1d14:	30 97       	sbiw	r30, 0x00	; 0
    1d16:	11 f4       	brne	.+4      	; 0x1d1c <__vector_126+0x14c>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1d18:	98 da       	rcall	.-2768   	; 0x124a <udd_ctrl_stall_data>
    1d1a:	22 c0       	rjmp	.+68     	; 0x1d60 <__vector_126+0x190>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1d1c:	09 95       	icall
    1d1e:	81 11       	cpse	r24, r1
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <__vector_126+0x156>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1d22:	93 da       	rcall	.-2778   	; 0x124a <udd_ctrl_stall_data>
    1d24:	1d c0       	rjmp	.+58     	; 0x1d60 <__vector_126+0x190>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1d26:	20 91 ef 22 	lds	r18, 0x22EF
    1d2a:	30 91 f0 22 	lds	r19, 0x22F0
    1d2e:	80 91 f1 22 	lds	r24, 0x22F1
    1d32:	90 91 f2 22 	lds	r25, 0x22F2
    1d36:	82 0f       	add	r24, r18
    1d38:	93 1f       	adc	r25, r19
    1d3a:	80 93 ef 22 	sts	0x22EF, r24
    1d3e:	90 93 f0 22 	sts	0x22F0, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1d42:	10 92 f1 22 	sts	0x22F1, r1
    1d46:	10 92 f2 22 	sts	0x22F2, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1d4a:	e4 ed       	ldi	r30, 0xD4	; 212
    1d4c:	f1 e2       	ldi	r31, 0x21	; 33
    1d4e:	02 e0       	ldi	r16, 0x02	; 2
    1d50:	06 93       	lac	Z, r16
    1d52:	06 c0       	rjmp	.+12     	; 0x1d60 <__vector_126+0x190>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1d54:	c0 38       	cpi	r28, 0x80	; 128
    1d56:	11 f4       	brne	.+4      	; 0x1d5c <__vector_126+0x18c>
		udd_ctrl_in_sent();
    1d58:	af da       	rcall	.-2722   	; 0x12b8 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <__vector_126+0x190>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1d5c:	8c 2f       	mov	r24, r28
    1d5e:	d5 db       	rcall	.-2134   	; 0x150a <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	bf 91       	pop	r27
    1d6a:	af 91       	pop	r26
    1d6c:	9f 91       	pop	r25
    1d6e:	8f 91       	pop	r24
    1d70:	7f 91       	pop	r23
    1d72:	6f 91       	pop	r22
    1d74:	5f 91       	pop	r21
    1d76:	4f 91       	pop	r20
    1d78:	3f 91       	pop	r19
    1d7a:	2f 91       	pop	r18
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <main>:
 */
#include <system.h>

int main (void)
{
	system_init();
    1d8a:	0b d0       	rcall	.+22     	; 0x1da2 <system_init>
	system_run();
    1d8c:	21 d0       	rcall	.+66     	; 0x1dd0 <system_run>
}
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	08 95       	ret

00001d94 <my_callback_cdc_enable>:

 void task(void)
 {
	 if (my_flag_autorize_cdc_transfert) {
		 udi_cdc_putc('A');
		 udi_cdc_getc();
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	80 93 f4 22 	sts	0x22F4, r24
    1d9a:	08 95       	ret

00001d9c <my_callback_cdc_disable>:
    1d9c:	10 92 f4 22 	sts	0x22F4, r1
    1da0:	08 95       	ret

00001da2 <system_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1da2:	43 e0       	ldi	r20, 0x03	; 3
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	80 e2       	ldi	r24, 0x20	; 32
    1daa:	96 e0       	ldi	r25, 0x06	; 6
    1dac:	0e 94 a7 01 	call	0x34e	; 0x34e <ioport_configure_port_pin>
    1db0:	43 e0       	ldi	r20, 0x03	; 3
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	68 e0       	ldi	r22, 0x08	; 8
    1db6:	80 e2       	ldi	r24, 0x20	; 32
    1db8:	96 e0       	ldi	r25, 0x06	; 6
    1dba:	0e 94 a7 01 	call	0x34e	; 0x34e <ioport_configure_port_pin>
	 */	
	
	ioport_configure_pin(LED0_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	ioport_configure_pin(LED1_GPIO, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);	
	
	sysclk_init();
    1dbe:	0e 94 1c 01 	call	0x238	; 0x238 <sysclk_init>
    irq_initialize_vectors();
    1dc2:	87 e0       	ldi	r24, 0x07	; 7
    1dc4:	e0 ea       	ldi	r30, 0xA0	; 160
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	82 83       	std	Z+2, r24	; 0x02
    cpu_irq_enable();	
    1dca:	78 94       	sei
	udc_start();
    1dcc:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <udc_start>

00001dd0 <system_run>:
}


void system_run (void)
{
    1dd0:	04 ef       	ldi	r16, 0xF4	; 244
    1dd2:	11 e0       	ldi	r17, 0x01	; 1
    1dd4:	c0 ed       	ldi	r28, 0xD0	; 208
    1dd6:	d7 e0       	ldi	r29, 0x07	; 7

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    1dd8:	0f 2e       	mov	r0, r31
    1dda:	f0 e2       	ldi	r31, 0x20	; 32
    1ddc:	cf 2e       	mov	r12, r31
    1dde:	f6 e0       	ldi	r31, 0x06	; 6
    1de0:	df 2e       	mov	r13, r31
    1de2:	f0 2d       	mov	r31, r0
    1de4:	68 94       	set
    1de6:	ff 24       	eor	r15, r15
    1de8:	f2 f8       	bld	r15, 2
    1dea:	98 01       	movw	r18, r16
    1dec:	05 c0       	rjmp	.+10     	; 0x1df8 <system_run+0x28>
    1dee:	01 97       	sbiw	r24, 0x01	; 1
	while(1)
	{
		k= 0;
		for(i=0;i < 500;i++)
		{
			for(j=0;j<2000;j++)
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <system_run+0x1e>
    1df2:	21 50       	subi	r18, 0x01	; 1
    1df4:	31 09       	sbc	r19, r1
	
	
	while(1)
	{
		k= 0;
		for(i=0;i < 500;i++)
    1df6:	11 f0       	breq	.+4      	; 0x1dfc <system_run+0x2c>
	udc_start();
}


void system_run (void)
{
    1df8:	ce 01       	movw	r24, r28
    1dfa:	f9 cf       	rjmp	.-14     	; 0x1dee <system_run+0x1e>
    1dfc:	f6 01       	movw	r30, r12
    1dfe:	f7 82       	std	Z+7, r15	; 0x07
			{
				k++;
			}
		}
		ioport_toggle_pin(LED0_GPIO);
			udi_cdc_putc('A');
    1e00:	81 e4       	ldi	r24, 0x41	; 65
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 82 04 	call	0x904	; 0x904 <udi_cdc_putc>

	}
    1e08:	f0 cf       	rjmp	.-32     	; 0x1dea <system_run+0x1a>

00001e0a <__udivmodhi4>:
    1e0a:	aa 1b       	sub	r26, r26
    1e0c:	bb 1b       	sub	r27, r27
    1e0e:	51 e1       	ldi	r21, 0x11	; 17
    1e10:	07 c0       	rjmp	.+14     	; 0x1e20 <__udivmodhi4_ep>

00001e12 <__udivmodhi4_loop>:
    1e12:	aa 1f       	adc	r26, r26
    1e14:	bb 1f       	adc	r27, r27
    1e16:	a6 17       	cp	r26, r22
    1e18:	b7 07       	cpc	r27, r23
    1e1a:	10 f0       	brcs	.+4      	; 0x1e20 <__udivmodhi4_ep>
    1e1c:	a6 1b       	sub	r26, r22
    1e1e:	b7 0b       	sbc	r27, r23

00001e20 <__udivmodhi4_ep>:
    1e20:	88 1f       	adc	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	5a 95       	dec	r21
    1e26:	a9 f7       	brne	.-22     	; 0x1e12 <__udivmodhi4_loop>
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	08 95       	ret

00001e32 <memcpy>:
    1e32:	fb 01       	movw	r30, r22
    1e34:	dc 01       	movw	r26, r24
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <memcpy+0xa>
    1e38:	01 90       	ld	r0, Z+
    1e3a:	0d 92       	st	X+, r0
    1e3c:	41 50       	subi	r20, 0x01	; 1
    1e3e:	50 40       	sbci	r21, 0x00	; 0
    1e40:	d8 f7       	brcc	.-10     	; 0x1e38 <memcpy+0x6>
    1e42:	08 95       	ret

00001e44 <_exit>:
    1e44:	f8 94       	cli

00001e46 <__stop_program>:
    1e46:	ff cf       	rjmp	.-2      	; 0x1e46 <__stop_program>
